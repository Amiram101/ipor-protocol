/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IJosephInterface extends utils.Interface {
  contractName: "IJoseph";
  functions: {
    "asset()": FunctionFragment;
    "checkVaultReservesRatio()": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositToVault(uint256)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "provideLiquidity(uint256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "withdrawFromVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkVaultReservesRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositToVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkVaultReservesRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {
    "ProvideLiquidity(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "Redeem(uint256,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProvideLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
}

export type ProvideLiquidityEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    timestamp: BigNumber;
    from: string;
    to: string;
    exchangeRate: BigNumber;
    assetValue: BigNumber;
    ipTokenValue: BigNumber;
  }
>;

export type ProvideLiquidityEventFilter =
  TypedEventFilter<ProvideLiquidityEvent>;

export type RedeemEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  {
    timestamp: BigNumber;
    from: string;
    to: string;
    exchangeRate: BigNumber;
    assetValue: BigNumber;
    ipTokenValue: BigNumber;
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface IJoseph extends BaseContract {
  contractName: "IJoseph";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJosephInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    asset(overrides?: CallOverrides): Promise<[string]>;

    "asset()"(overrides?: CallOverrides): Promise<[string]>;

    checkVaultReservesRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "checkVaultReservesRatio()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    provideLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "provideLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  checkVaultReservesRatio(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "checkVaultReservesRatio()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  depositToVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositToVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  provideLiquidity(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "provideLiquidity(uint256)"(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebalance()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    ipTokenVolume: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    ipTokenVolume: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    checkVaultReservesRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "checkVaultReservesRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    "rebalance()"(overrides?: CallOverrides): Promise<void>;

    redeem(
      ipTokenVolume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(uint256)"(
      ipTokenVolume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProvideLiquidity(uint256,address,address,uint256,uint256,uint256)"(
      timestamp?: null,
      from?: null,
      to?: null,
      exchangeRate?: null,
      assetValue?: null,
      ipTokenValue?: null
    ): ProvideLiquidityEventFilter;
    ProvideLiquidity(
      timestamp?: null,
      from?: null,
      to?: null,
      exchangeRate?: null,
      assetValue?: null,
      ipTokenValue?: null
    ): ProvideLiquidityEventFilter;

    "Redeem(uint256,address,address,uint256,uint256,uint256)"(
      timestamp?: null,
      from?: null,
      to?: null,
      exchangeRate?: null,
      assetValue?: null,
      ipTokenValue?: null
    ): RedeemEventFilter;
    Redeem(
      timestamp?: null,
      from?: null,
      to?: null,
      exchangeRate?: null,
      assetValue?: null,
      ipTokenValue?: null
    ): RedeemEventFilter;
  };

  estimateGas: {
    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkVaultReservesRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "checkVaultReservesRatio()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "provideLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkVaultReservesRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "checkVaultReservesRatio()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "provideLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebalance()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      ipTokenVolume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
