/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type IporSwapMemoryStruct = {
    state: BigNumberish;
    buyer: string;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    id: BigNumberish;
    idsIndex: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type IporSwapMemoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: BigNumber;
    buyer: string;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    id: BigNumber;
    idsIndex: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };

  export type IporSwapInterestStruct = {
    quasiInterestFixed: BigNumberish;
    quasiInterestFloating: BigNumberish;
    positionValue: BigNumberish;
  };

  export type IporSwapInterestStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    quasiInterestFixed: BigNumber;
    quasiInterestFloating: BigNumber;
    positionValue: BigNumber;
  };
}

export interface MockIporSwapLogicInterface extends utils.Interface {
  contractName: "MockIporSwapLogic";
  functions: {
    "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "calculateQuasiInterestFixed(uint256,uint256,uint256)": FunctionFragment;
    "calculateQuasiInterestFloating(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateInterestForSwapPayFixed",
    values: [DataTypes.IporSwapMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestForSwapReceiveFixed",
    values: [DataTypes.IporSwapMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiInterestFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiInterestFloating",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateInterestForSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestForSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiInterestFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiInterestFloating",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockIporSwapLogic extends BaseContract {
  contractName: "MockIporSwapLogic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockIporSwapLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateInterestForSwapPayFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapInterestStructOutput]>;

    "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapInterestStructOutput]>;

    calculateInterestForSwapReceiveFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapInterestStructOutput]>;

    "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapInterestStructOutput]>;

    calculateQuasiInterestFixed(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiInterestFixed(uint256,uint256,uint256)"(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiInterestFloating(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiInterestFloating(uint256,uint256)"(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculateInterestForSwapPayFixed(
    swap: DataTypes.IporSwapMemoryStruct,
    closingTimestamp: BigNumberish,
    mdIbtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapInterestStructOutput>;

  "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    swap: DataTypes.IporSwapMemoryStruct,
    closingTimestamp: BigNumberish,
    mdIbtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapInterestStructOutput>;

  calculateInterestForSwapReceiveFixed(
    swap: DataTypes.IporSwapMemoryStruct,
    closingTimestamp: BigNumberish,
    mdIbtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapInterestStructOutput>;

  "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    swap: DataTypes.IporSwapMemoryStruct,
    closingTimestamp: BigNumberish,
    mdIbtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapInterestStructOutput>;

  calculateQuasiInterestFixed(
    notionalAmount: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    swapPeriodInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiInterestFixed(uint256,uint256,uint256)"(
    notionalAmount: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    swapPeriodInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiInterestFloating(
    ibtQuantity: BigNumberish,
    ibtCurrentPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiInterestFloating(uint256,uint256)"(
    ibtQuantity: BigNumberish,
    ibtCurrentPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculateInterestForSwapPayFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapInterestStructOutput>;

    "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapInterestStructOutput>;

    calculateInterestForSwapReceiveFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapInterestStructOutput>;

    "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapInterestStructOutput>;

    calculateQuasiInterestFixed(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestFixed(uint256,uint256,uint256)"(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiInterestFloating(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestFloating(uint256,uint256)"(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateInterestForSwapPayFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestForSwapReceiveFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiInterestFixed(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestFixed(uint256,uint256,uint256)"(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiInterestFloating(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestFloating(uint256,uint256)"(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateInterestForSwapPayFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestForSwapPayFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestForSwapReceiveFixed(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestForSwapReceiveFixed((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      swap: DataTypes.IporSwapMemoryStruct,
      closingTimestamp: BigNumberish,
      mdIbtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiInterestFixed(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiInterestFixed(uint256,uint256,uint256)"(
      notionalAmount: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      swapPeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiInterestFloating(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiInterestFloating(uint256,uint256)"(
      ibtQuantity: BigNumberish,
      ibtCurrentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
