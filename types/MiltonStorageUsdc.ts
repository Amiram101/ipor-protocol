/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type MiltonBalanceMemoryStruct = {
    payFixedSwaps: BigNumberish;
    receiveFixedSwaps: BigNumberish;
    liquidityPool: BigNumberish;
    vault: BigNumberish;
  };

  export type MiltonBalanceMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payFixedSwaps: BigNumber;
    receiveFixedSwaps: BigNumber;
    liquidityPool: BigNumber;
    vault: BigNumber;
  };

  export type MiltonExtendedBalanceMemoryStruct = {
    payFixedSwaps: BigNumberish;
    receiveFixedSwaps: BigNumberish;
    liquidityPool: BigNumberish;
    vault: BigNumberish;
    openingFee: BigNumberish;
    liquidationDeposit: BigNumberish;
    iporPublicationFee: BigNumberish;
    treasury: BigNumberish;
  };

  export type MiltonExtendedBalanceMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payFixedSwaps: BigNumber;
    receiveFixedSwaps: BigNumber;
    liquidityPool: BigNumber;
    vault: BigNumber;
    openingFee: BigNumber;
    liquidationDeposit: BigNumber;
    iporPublicationFee: BigNumber;
    treasury: BigNumber;
  };

  export type IporSwapMemoryStruct = {
    state: BigNumberish;
    buyer: string;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    id: BigNumberish;
    idsIndex: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type IporSwapMemoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: BigNumber;
    buyer: string;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    id: BigNumber;
    idsIndex: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };

  export type NewSwapStruct = {
    buyer: string;
    startingTimestamp: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type NewSwapStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    buyer: string;
    startingTimestamp: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };
}

export interface MiltonStorageUsdcInterface extends utils.Interface {
  contractName: "MiltonStorageUsdc";
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "addLiquidityAssetManagmentMock(uint256)": FunctionFragment;
    "calculateSoap(uint256,uint256)": FunctionFragment;
    "calculateSoapPayFixed(uint256,uint256)": FunctionFragment;
    "calculateSoapReceiveFixed(uint256,uint256)": FunctionFragment;
    "confirmTransferOwnership()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getExtendedBalance()": FunctionFragment;
    "getLastSwapId()": FunctionFragment;
    "getSwapPayFixed(uint256)": FunctionFragment;
    "getSwapPayFixedIds(address)": FunctionFragment;
    "getSwapReceiveFixed(uint256)": FunctionFragment;
    "getSwapReceiveFixedIds(address)": FunctionFragment;
    "getSwapsPayFixed(address)": FunctionFragment;
    "getSwapsReceiveFixed(address)": FunctionFragment;
    "getTotalOutstandingNotional()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setJoseph(address)": FunctionFragment;
    "setMilton(address)": FunctionFragment;
    "subtractLiquidity(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)": FunctionFragment;
    "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)": FunctionFragment;
    "updateStorageWhenDepositToVault(uint256,uint256)": FunctionFragment;
    "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateStorageWhenTransferPublicationFee(uint256)": FunctionFragment;
    "updateStorageWhenWithdrawFromVault(uint256,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityAssetManagmentMock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoapPayFixed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoapReceiveFixed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExtendedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSwapId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapPayFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapPayFixedIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapReceiveFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapReceiveFixedIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapsPayFixed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapsReceiveFixed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOutstandingNotional",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setJoseph", values: [string]): string;
  encodeFunctionData(functionFragment: "setMilton", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subtractLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenCloseSwapPayFixed",
    values: [
      string,
      DataTypes.IporSwapMemoryStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenCloseSwapReceiveFixed",
    values: [
      string,
      DataTypes.IporSwapMemoryStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenDepositToVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenOpenSwapPayFixed",
    values: [
      DataTypes.NewSwapStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenOpenSwapReceiveFixed",
    values: [
      DataTypes.NewSwapStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenTransferPublicationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStorageWhenWithdrawFromVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityAssetManagmentMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExtendedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSwapId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapPayFixedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapReceiveFixedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapsPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapsReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOutstandingNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJoseph", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMilton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subtractLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenCloseSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenCloseSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenDepositToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenOpenSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenOpenSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenTransferPublicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStorageWhenWithdrawFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AppointedToTransferOwnership(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppointedToTransferOwnership"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AppointedToTransferOwnershipEvent = TypedEvent<
  [string],
  { appointedOwner: string }
>;

export type AppointedToTransferOwnershipEventFilter =
  TypedEventFilter<AppointedToTransferOwnershipEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MiltonStorageUsdc extends BaseContract {
  contractName: "MiltonStorageUsdc";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiltonStorageUsdcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityAssetManagmentMock(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidityAssetManagmentMock(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateSoap(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSoapPayFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { soapPf: BigNumber }>;

    "calculateSoapPayFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { soapPf: BigNumber }>;

    calculateSoapReceiveFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { soapRf: BigNumber }>;

    "calculateSoapReceiveFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { soapRf: BigNumber }>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    "getBalance()"(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    getExtendedBalance(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonExtendedBalanceMemoryStructOutput]>;

    "getExtendedBalance()"(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonExtendedBalanceMemoryStructOutput]>;

    getLastSwapId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLastSwapId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput]>;

    "getSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput]>;

    getSwapPayFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getSwapPayFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput]>;

    "getSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput]>;

    getSwapReceiveFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getSwapReceiveFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSwapsPayFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    "getSwapsPayFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    getSwapsReceiveFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    "getSwapsReceiveFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    getTotalOutstandingNotional(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    "getTotalOutstandingNotional()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subtractLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "subtractLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenCloseSwapPayFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenCloseSwapReceiveFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenDepositToVault(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenDepositToVault(uint256,uint256)"(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenOpenSwapPayFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenOpenSwapReceiveFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenTransferPublicationFee(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenTransferPublicationFee(uint256)"(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStorageWhenWithdrawFromVault(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStorageWhenWithdrawFromVault(uint256,uint256)"(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256)"(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityAssetManagmentMock(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidityAssetManagmentMock(uint256)"(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateSoap(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  "calculateSoap(uint256,uint256)"(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  calculateSoapPayFixed(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSoapPayFixed(uint256,uint256)"(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSoapReceiveFixed(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSoapReceiveFixed(uint256,uint256)"(
    ibtPrice: BigNumberish,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  confirmTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmTransferOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  "getBalance()"(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  getExtendedBalance(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonExtendedBalanceMemoryStructOutput>;

  "getExtendedBalance()"(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonExtendedBalanceMemoryStructOutput>;

  getLastSwapId(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastSwapId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSwapPayFixed(
    swapId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput>;

  "getSwapPayFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput>;

  getSwapPayFixedIds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getSwapPayFixedIds(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSwapReceiveFixed(
    swapId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput>;

  "getSwapReceiveFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput>;

  getSwapReceiveFixedIds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getSwapReceiveFixedIds(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSwapsPayFixed(
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getSwapsPayFixed(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  getSwapsReceiveFixed(
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getSwapsReceiveFixed(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  getTotalOutstandingNotional(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      payFixedTotalNotional: BigNumber;
      recFixedTotalNotional: BigNumber;
    }
  >;

  "getTotalOutstandingNotional()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      payFixedTotalNotional: BigNumber;
      recFixedTotalNotional: BigNumber;
    }
  >;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoseph(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoseph(address)"(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMilton(
    milton: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMilton(address)"(
    milton: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subtractLiquidity(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "subtractLiquidity(uint256)"(
    liquidityAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenCloseSwapPayFixed(
    account: string,
    iporSwap: DataTypes.IporSwapMemoryStruct,
    positionValue: BigNumberish,
    closingTimestamp: BigNumberish,
    cfgIncomeTaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
    account: string,
    iporSwap: DataTypes.IporSwapMemoryStruct,
    positionValue: BigNumberish,
    closingTimestamp: BigNumberish,
    cfgIncomeTaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenCloseSwapReceiveFixed(
    account: string,
    iporSwap: DataTypes.IporSwapMemoryStruct,
    positionValue: BigNumberish,
    closingTimestamp: BigNumberish,
    cfgIncomeTaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
    account: string,
    iporSwap: DataTypes.IporSwapMemoryStruct,
    positionValue: BigNumberish,
    closingTimestamp: BigNumberish,
    cfgIncomeTaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenDepositToVault(
    depositValue: BigNumberish,
    vaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenDepositToVault(uint256,uint256)"(
    depositValue: BigNumberish,
    vaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenOpenSwapPayFixed(
    newSwap: DataTypes.NewSwapStruct,
    openingAmount: BigNumberish,
    cfgLiquidationDepositAmount: BigNumberish,
    cfgIporPublicationFeeAmount: BigNumberish,
    cfgOpeningFeeForTreasuryPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
    newSwap: DataTypes.NewSwapStruct,
    openingAmount: BigNumberish,
    cfgLiquidationDepositAmount: BigNumberish,
    cfgIporPublicationFeeAmount: BigNumberish,
    cfgOpeningFeeForTreasuryPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenOpenSwapReceiveFixed(
    newSwap: DataTypes.NewSwapStruct,
    openingAmount: BigNumberish,
    cfgLiquidationDepositAmount: BigNumberish,
    cfgIporPublicationFeeAmount: BigNumberish,
    cfgOpeningFeeForTreasuryPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
    newSwap: DataTypes.NewSwapStruct,
    openingAmount: BigNumberish,
    cfgLiquidationDepositAmount: BigNumberish,
    cfgIporPublicationFeeAmount: BigNumberish,
    cfgOpeningFeeForTreasuryPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenTransferPublicationFee(
    transferedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenTransferPublicationFee(uint256)"(
    transferedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStorageWhenWithdrawFromVault(
    withdrawnValue: BigNumberish,
    vaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStorageWhenWithdrawFromVault(uint256,uint256)"(
    withdrawnValue: BigNumberish,
    vaultBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityAssetManagmentMock(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityAssetManagmentMock(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateSoap(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSoapPayFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapPayFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapReceiveFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapReceiveFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(overrides?: CallOverrides): Promise<void>;

    "confirmTransferOwnership()"(overrides?: CallOverrides): Promise<void>;

    getBalance(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    "getBalance()"(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    getExtendedBalance(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonExtendedBalanceMemoryStructOutput>;

    "getExtendedBalance()"(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonExtendedBalanceMemoryStructOutput>;

    getLastSwapId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastSwapId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput>;

    "getSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput>;

    getSwapPayFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getSwapPayFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput>;

    "getSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput>;

    getSwapReceiveFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getSwapReceiveFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSwapsPayFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getSwapsPayFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    getSwapsReceiveFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getSwapsReceiveFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    getTotalOutstandingNotional(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    "getTotalOutstandingNotional()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setJoseph(joseph: string, overrides?: CallOverrides): Promise<void>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMilton(milton: string, overrides?: CallOverrides): Promise<void>;

    "setMilton(address)"(
      milton: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subtractLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "subtractLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageWhenCloseSwapPayFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageWhenCloseSwapReceiveFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageWhenDepositToVault(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStorageWhenDepositToVault(uint256,uint256)"(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageWhenOpenSwapPayFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStorageWhenOpenSwapReceiveFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStorageWhenTransferPublicationFee(
      transferedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStorageWhenTransferPublicationFee(uint256)"(
      transferedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStorageWhenWithdrawFromVault(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStorageWhenWithdrawFromVault(uint256,uint256)"(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AppointedToTransferOwnership(address)"(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;
    AppointedToTransferOwnership(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityAssetManagmentMock(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidityAssetManagmentMock(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateSoap(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoap(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapPayFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapPayFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapReceiveFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapReceiveFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExtendedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getExtendedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastSwapId(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastSwapId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapPayFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapPayFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapReceiveFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapReceiveFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapsPayFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapsPayFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapsReceiveFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapsReceiveFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOutstandingNotional(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalOutstandingNotional()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subtractLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "subtractLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenCloseSwapPayFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenCloseSwapReceiveFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenDepositToVault(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenDepositToVault(uint256,uint256)"(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenOpenSwapPayFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenOpenSwapReceiveFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenTransferPublicationFee(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenTransferPublicationFee(uint256)"(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStorageWhenWithdrawFromVault(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStorageWhenWithdrawFromVault(uint256,uint256)"(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityAssetManagmentMock(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidityAssetManagmentMock(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateSoap(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSoap(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoapPayFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSoapPayFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoapReceiveFixed(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSoapReceiveFixed(uint256,uint256)"(
      ibtPrice: BigNumberish,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtendedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExtendedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastSwapId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastSwapId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapPayFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapPayFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapReceiveFixedIds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapReceiveFixedIds(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapsPayFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapsPayFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapsReceiveFixed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapsReceiveFixed(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOutstandingNotional(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalOutstandingNotional()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subtractLiquidity(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "subtractLiquidity(uint256)"(
      liquidityAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenCloseSwapPayFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenCloseSwapPayFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenCloseSwapReceiveFixed(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenCloseSwapReceiveFixed(address,(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),int256,uint256,uint256)"(
      account: string,
      iporSwap: DataTypes.IporSwapMemoryStruct,
      positionValue: BigNumberish,
      closingTimestamp: BigNumberish,
      cfgIncomeTaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenDepositToVault(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenDepositToVault(uint256,uint256)"(
      depositValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenOpenSwapPayFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenOpenSwapPayFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenOpenSwapReceiveFixed(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenOpenSwapReceiveFixed((address,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      newSwap: DataTypes.NewSwapStruct,
      openingAmount: BigNumberish,
      cfgLiquidationDepositAmount: BigNumberish,
      cfgIporPublicationFeeAmount: BigNumberish,
      cfgOpeningFeeForTreasuryPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenTransferPublicationFee(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenTransferPublicationFee(uint256)"(
      transferedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStorageWhenWithdrawFromVault(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStorageWhenWithdrawFromVault(uint256,uint256)"(
      withdrawnValue: BigNumberish,
      vaultBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
