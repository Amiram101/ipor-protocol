/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type IporSwapMemoryStruct = {
    state: BigNumberish;
    buyer: string;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    id: BigNumberish;
    idsIndex: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type IporSwapMemoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: BigNumber;
    buyer: string;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    id: BigNumber;
    idsIndex: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };
}

export interface MiltonDevToolDataProviderInterface extends utils.Interface {
  contractName: "MiltonDevToolDataProvider";
  functions: {
    "calculateSpread(address)": FunctionFragment;
    "confirmTransferOwnership()": FunctionFragment;
    "getMyAllowanceInJoseph(address)": FunctionFragment;
    "getMyAllowanceInMilton(address)": FunctionFragment;
    "getMyIpTokenBalance(address)": FunctionFragment;
    "getMySwapsPayFixed(address)": FunctionFragment;
    "getMySwapsReceiveFixed(address)": FunctionFragment;
    "getMyTotalSupply(address)": FunctionFragment;
    "getSwapsPayFixed(address,address)": FunctionFragment;
    "getSwapsReceiveFixed(address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateSpread",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyAllowanceInJoseph",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyAllowanceInMilton",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyIpTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMySwapsPayFixed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMySwapsReceiveFixed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTotalSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapsPayFixed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapsReceiveFixed",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyAllowanceInJoseph",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyAllowanceInMilton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyIpTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMySwapsPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMySwapsReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapsPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapsReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AppointedToTransferOwnership(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppointedToTransferOwnership"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AppointedToTransferOwnershipEvent = TypedEvent<
  [string],
  { appointedOwner: string }
>;

export type AppointedToTransferOwnershipEventFilter =
  TypedEventFilter<AppointedToTransferOwnershipEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MiltonDevToolDataProvider extends BaseContract {
  contractName: "MiltonDevToolDataProvider";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiltonDevToolDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateSpread(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    "calculateSpread(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMyAllowanceInJoseph(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMyAllowanceInJoseph(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMyAllowanceInMilton(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMyAllowanceInMilton(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMyIpTokenBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMyIpTokenBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMySwapsPayFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.IporSwapMemoryStructOutput[]] & {
        items: DataTypes.IporSwapMemoryStructOutput[];
      }
    >;

    "getMySwapsPayFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.IporSwapMemoryStructOutput[]] & {
        items: DataTypes.IporSwapMemoryStructOutput[];
      }
    >;

    getMySwapsReceiveFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.IporSwapMemoryStructOutput[]] & {
        items: DataTypes.IporSwapMemoryStructOutput[];
      }
    >;

    "getMySwapsReceiveFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.IporSwapMemoryStructOutput[]] & {
        items: DataTypes.IporSwapMemoryStructOutput[];
      }
    >;

    getMyTotalSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMyTotalSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapsPayFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    "getSwapsPayFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    getSwapsReceiveFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    "getSwapsReceiveFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.IporSwapMemoryStructOutput[]]>;

    initialize(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateSpread(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      spreadPayFixedValue: BigNumber;
      spreadRecFixedValue: BigNumber;
    }
  >;

  "calculateSpread(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      spreadPayFixedValue: BigNumber;
      spreadRecFixedValue: BigNumber;
    }
  >;

  confirmTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmTransferOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMyAllowanceInJoseph(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMyAllowanceInJoseph(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMyAllowanceInMilton(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMyAllowanceInMilton(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMyIpTokenBalance(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMyIpTokenBalance(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMySwapsPayFixed(
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getMySwapsPayFixed(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  getMySwapsReceiveFixed(
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getMySwapsReceiveFixed(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  getMyTotalSupply(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMyTotalSupply(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapsPayFixed(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getSwapsPayFixed(address,address)"(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  getSwapsReceiveFixed(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  "getSwapsReceiveFixed(address,address)"(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

  initialize(
    iporConfiguration: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    iporConfiguration: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateSpread(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    "calculateSpread(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    confirmTransferOwnership(overrides?: CallOverrides): Promise<void>;

    "confirmTransferOwnership()"(overrides?: CallOverrides): Promise<void>;

    getMyAllowanceInJoseph(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyAllowanceInJoseph(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyAllowanceInMilton(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyAllowanceInMilton(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyIpTokenBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyIpTokenBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMySwapsPayFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getMySwapsPayFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    getMySwapsReceiveFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getMySwapsReceiveFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    getMyTotalSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyTotalSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapsPayFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getSwapsPayFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    getSwapsReceiveFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    "getSwapsReceiveFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.IporSwapMemoryStructOutput[]>;

    initialize(
      iporConfiguration: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      iporConfiguration: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AppointedToTransferOwnership(address)"(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;
    AppointedToTransferOwnership(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    calculateSpread(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSpread(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMyAllowanceInJoseph(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyAllowanceInJoseph(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyAllowanceInMilton(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyAllowanceInMilton(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyIpTokenBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyIpTokenBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMySwapsPayFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMySwapsPayFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMySwapsReceiveFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMySwapsReceiveFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyTotalSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyTotalSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapsPayFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapsPayFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapsReceiveFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSwapsReceiveFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateSpread(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSpread(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMyAllowanceInJoseph(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyAllowanceInJoseph(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyAllowanceInMilton(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyAllowanceInMilton(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyIpTokenBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyIpTokenBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMySwapsPayFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMySwapsPayFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMySwapsReceiveFixed(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMySwapsReceiveFixed(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyTotalSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyTotalSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapsPayFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapsPayFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapsReceiveFixed(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSwapsReceiveFixed(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      iporConfiguration: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
