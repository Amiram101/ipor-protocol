/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MiltonSpreadConfiguration,
  MiltonSpreadConfigurationInterface,
} from "../MiltonSpreadConfiguration";

const _abi = [
  {
    inputs: [],
    name: "getAtParComponentKHistValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getAtParComponentKVolValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getDCKOmegaValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getDCKfValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getDCLambdaValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getDCMaxLiquidityRedemptionValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getSpreadPremiumsMaxValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010a806100206000396000f3fe6080604052348015600f57600080fd5b506004361060735760003560e01c8063d718f640116054578063d718f6401460a9578063db1492e21460b5578063e133247b1460c2578063fcd0ac381460c857600080fd5b8063118e90dc14607857806385bb0c411460935780639454e20f14609e575b600080fd5b660110d9316ec0005b60405190815260200160405180910390f35b652d79883d20006081565b6509184e72a0006081565b660aa87bee5380006081565b670de0b6b3a76400006081565b60006081565b662386f26fc10000608156fea26469706673582212207ff6ad159df5c290249dcae765f191d04ced5d73f31f1165af0c8989c20c80a864736f6c63430008090033";

type MiltonSpreadConfigurationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MiltonSpreadConfigurationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MiltonSpreadConfiguration__factory extends ContractFactory {
  constructor(...args: MiltonSpreadConfigurationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MiltonSpreadConfiguration";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MiltonSpreadConfiguration> {
    return super.deploy(overrides || {}) as Promise<MiltonSpreadConfiguration>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MiltonSpreadConfiguration {
    return super.attach(address) as MiltonSpreadConfiguration;
  }
  connect(signer: Signer): MiltonSpreadConfiguration__factory {
    return super.connect(signer) as MiltonSpreadConfiguration__factory;
  }
  static readonly contractName: "MiltonSpreadConfiguration";
  public readonly contractName: "MiltonSpreadConfiguration";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MiltonSpreadConfigurationInterface {
    return new utils.Interface(_abi) as MiltonSpreadConfigurationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MiltonSpreadConfiguration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MiltonSpreadConfiguration;
  }
}
