/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockIporLogic, MockIporLogicInterface } from "../MockIporLogic";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "blockTimestamp",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "indexValue",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "quasiIbtPrice",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "exponentialMovingAverage",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "exponentialWeightedMovingVariance",
            type: "uint128",
          },
        ],
        internalType: "struct DataTypes.IPOR",
        name: "ipor",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "accrueTimestamp",
        type: "uint256",
      },
    ],
    name: "accrueQuasiIbtPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastExponentialMovingAverage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decayFactor",
        type: "uint256",
      },
    ],
    name: "calculateExponentialMovingAverage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastExponentialWeightedMovingVariance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exponentialMovingAverage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "alfa",
        type: "uint256",
      },
    ],
    name: "calculateExponentialWeightedMovingVariance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610573806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312ae93541461004657806384e756fb1461006b578063e25552291461007e575b600080fd5b610059610054366004610320565b610091565b60405190815260200160405180910390f35b61005961007936600461034c565b6100a6565b61005961008c3660046103ae565b6100bd565b600061009e8484846100d0565b949350505050565b60006100b485858585610113565b95945050505050565b60006100c98383610269565b9392505050565b600061009e6100df8385610478565b6100f184670de0b6b3a7640000610497565b6100fb9087610478565b61010591906104ae565b670de0b6b3a764000061029b565b6000670de0b6b3a76400008211156040518060400160405280600781526020016649504f525f353560c81b815250906101685760405162461bcd60e51b815260040161015f91906104c6565b60405180910390fd5b50838311156101ff576101f861017e8585610497565b6101888686610497565b61019a85670de0b6b3a7640000610497565b6101a49190610478565b6101ae9190610478565b6101c76ec097ce7bc90715b34b9f100000000088610478565b6101d191906104ae565b6101db9084610478565b760a70c3c40a64e6c51999090b65f67d924000000000000061029b565b9050610219565b61021661020c8486610497565b6101888587610497565b90505b604080518082019091526007815266125413d497cd4d60ca1b6020820152670de0b6b3a76400008211156102605760405162461bcd60e51b815260040161015f91906104c6565b50949350505050565b60006100c983602001516001600160801b031684604001516001600160801b0316856000015163ffffffff16856102bd565b6000816102a960028261051b565b6102b390856104ae565b6100c9919061051b565b6000828210156040518060400160405280600781526020016649504f525f323760c81b815250906103015760405162461bcd60e51b815260040161015f91906104c6565b5061030c8383610497565b6103169086610478565b6100b490856104ae565b60008060006060848603121561033557600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561036257600080fd5b5050823594602084013594506040840135936060013592509050565b803563ffffffff8116811461039257600080fd5b919050565b80356001600160801b038116811461039257600080fd5b60008082840360c08112156103c257600080fd5b60a08112156103d057600080fd5b5060405160a0810181811067ffffffffffffffff8211171561040257634e487b7160e01b600052604160045260246000fd5b60405261040e8461037e565b815261041c60208501610397565b602082015261042d60408501610397565b604082015261043e60608501610397565b606082015261044f60808501610397565b60808201529460a0939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561049257610492610462565b500290565b6000828210156104a9576104a9610462565b500390565b600082198211156104c1576104c1610462565b500190565b600060208083528351808285015260005b818110156104f3578581018301518582016040015282016104d7565b81811115610505576000604083870101525b50601f01601f1916929092016040019392505050565b60008261053857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200123186bfbe702e69521ed490bd5df31c3a7e8b96a3ebd2cb85d3edcc86dae0e64736f6c63430008090033";

type MockIporLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockIporLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockIporLogic__factory extends ContractFactory {
  constructor(...args: MockIporLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockIporLogic";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockIporLogic> {
    return super.deploy(overrides || {}) as Promise<MockIporLogic>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockIporLogic {
    return super.attach(address) as MockIporLogic;
  }
  connect(signer: Signer): MockIporLogic__factory {
    return super.connect(signer) as MockIporLogic__factory;
  }
  static readonly contractName: "MockIporLogic";
  public readonly contractName: "MockIporLogic";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIporLogicInterface {
    return new utils.Interface(_abi) as MockIporLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockIporLogic {
    return new Contract(address, _abi, signerOrProvider) as MockIporLogic;
  }
}
