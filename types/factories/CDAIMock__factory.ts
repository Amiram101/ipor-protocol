/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CDAIMock, CDAIMockInterface } from "../CDAIMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dai",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "interestRateModel",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "_comptroller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_exchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_getCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_interestRateModel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_reserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_comp",
        type: "address",
      },
    ],
    name: "_setComptroller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "_setExchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_supplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_totalBorrows",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_totalReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "borrowRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "comptroller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dai",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateCurrent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "interestRateModel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "params",
        type: "uint256[]",
      },
    ],
    name: "setParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "v",
        type: "uint128",
      },
    ],
    name: "setSupplyRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supplyRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "toMint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "toTransfer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBorrows",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015f0380380620015f08339810160408190526200003491620002ac565b6040805180820182526004808252636344414960e01b6020808401828152855180870190965292855284015281519192916200007391600391620001e9565b50805162000089906004906020840190620001e9565b5050600580546001600160a01b038087166001600160a01b0319928316179092556008805492851692909116919091179055506aa56fa5b99019a5c8000000600a556407a5e3fd4e600955620000e630655af3107a400062000101565b620000f8826509184e72a00062000101565b5050506200035a565b6001600160a01b0382166200015c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001709190620002f6565b90915550506001600160a01b038216600090815260208190526040812080548392906200019f908490620002f6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001f7906200031d565b90600052602060002090601f0160209004810192826200021b576000855562000266565b82601f106200023657805160ff191683800117855562000266565b8280016001018555821562000266579182015b828111156200026657825182559160200191906001019062000249565b506200027492915062000278565b5090565b5b8082111562000274576000815560010162000279565b80516001600160a01b0381168114620002a757600080fd5b919050565b600080600060608486031215620002c257600080fd5b620002cd846200028f565b9250620002dd602085016200028f565b9150620002ed604085016200028f565b90509250925092565b600082198211156200031857634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200033257607f821691505b602082108114156200035457634e487b7160e01b600052602260045260246000fd5b50919050565b611286806200036a6000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80638f840ddd1161013b578063bd6d894d116100b8578063dd62ed3e1161007c578063dd62ed3e146104a5578063e62854f8146104de578063f3fdb15a146104e7578063f4b9fa75146104f8578063f8f9da281461045d57600080fd5b8063bd6d894d1461045d578063bf17b4de14610464578063c932bd3a1461046d578063d7c789ce14610476578063db006a751461049257600080fd5b8063a9059cbb116100ff578063a9059cbb1461041d578063ae604b9814610430578063ae9d70b014610439578063b233f8fb14610441578063bc7c062f1461044a57600080fd5b80638f840ddd146103de57806395aa338a146103e657806395d89b41146103ef578063a0712d68146103f7578063a457c2d71461040a57600080fd5b80633b1d21a2116101c9578063623d571c1161018d578063623d571c146103715780636f307dc31461038457806370a082311461038b57806371491368146103b4578063852a12e3146103ca57600080fd5b80633b1d21a2146102f75780634576b5db146102ff57806347bd3718146103315780634c546169146103395780635fe3b5671461034c57600080fd5b8063182df0f511610210578063182df0f5146102b157806323b872dd146102b95780632d3cfcab146102cc578063313ce567146102d557806339509351146102e457600080fd5b806306fdde031461024d578063095ea7b31461026b578063173b99041461028e578063179c2a3c146102a057806318160ddd146102a9575b600080fd5b61025561050b565b6040516102629190610f1c565b60405180910390f35b61027e610279366004610f8d565b61059d565b6040519015158152602001610262565b600d545b604051908152602001610262565b610292600b5481565b600254610292565b600a54610292565b61027e6102c7366004610fb7565b6105b5565b61029260075481565b60405160088152602001610262565b61027e6102f2366004610f8d565b6105d9565b600e54610292565b61032f61030d366004610ff3565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b005b600b54610292565b61032f610347366004611024565b610618565b600f546001600160a01b03165b6040516001600160a01b039091168152602001610262565b600854610359906001600160a01b031681565b6000610359565b610292610399366004610ff3565b6001600160a01b031660009081526020819052604090205490565b6102926103c23660046110e2565b600a55600090565b6102926103d83660046110e2565b50600090565b600c54610292565b610292600c5481565b61025561068c565b6102926104053660046110e2565b61069b565b61027e610418366004610f8d565b6107a5565b61027e61042b366004610f8d565b610837565b610292600e5481565b600954610292565b61029260065481565b600f54610359906001600160a01b031681565b6000610292565b610292600a5481565b61029260095481565b61032f6104843660046110fb565b6001600160801b0316600955565b6102926104a03660046110e2565b610845565b6102926104b3366004611124565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610292600d5481565b6008546001600160a01b0316610359565b600554610359906001600160a01b031681565b60606003805461051a90611157565b80601f016020809104026020016040519081016040528092919081815260200182805461054690611157565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b5050505050905090565b6000336105ab818585610949565b5060019392505050565b6000336105c3858285610a6e565b6105ce858585610b00565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906105ab90829086906106139087906111a8565b610949565b8060028151811061062b5761062b6111c0565b6020026020010151600b819055508060048151811061064c5761064c6111c0565b6020026020010151600c8190555066b1a2bc2ec50000600d819055508060068151811061067b5761067b6111c0565b6020026020010151600e8190555050565b60606004805461051a90611157565b6005546040516323b872dd60e01b8152336004820152306024820152604481018390526000916001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072691906111d6565b6107775760405162461bcd60e51b815260206004820152601960248201527f4572726f7220647572696e67207472616e7366657246726f6d0000000000000060448201526064015b60405180910390fd5b61079d3361079861079085670de0b6b3a76400006111f8565b600a54610cce565b610cf7565b506000919050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561082a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161076e565b6105ce8286868403610949565b6000336105ab818585610b00565b60006108513383610dd6565b600554600a546001600160a01b039091169063a9059cbb9033906108879061087990876111f8565b670de0b6b3a7640000610cce565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108cd57600080fd5b505af11580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090591906111d6565b61079d5760405162461bcd60e51b815260206004820152601560248201527422b93937b910323ab934b733903a3930b739b332b960591b604482015260640161076e565b6001600160a01b0383166109ab5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161076e565b6001600160a01b038216610a0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161076e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610afa5781811015610aed5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161076e565b610afa8484848403610949565b50505050565b6001600160a01b038316610b645760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161076e565b6001600160a01b038216610bc65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161076e565b6001600160a01b03831660009081526020819052604090205481811015610c3e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161076e565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610c759084906111a8565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cc191815260200190565b60405180910390a3610afa565b600081610cdc600282611217565b610ce690856111a8565b610cf09190611217565b9392505050565b6001600160a01b038216610d4d5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161076e565b8060026000828254610d5f91906111a8565b90915550506001600160a01b03821660009081526020819052604081208054839290610d8c9084906111a8565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610e365760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161076e565b6001600160a01b03821660009081526020819052604090205481811015610eaa5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161076e565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ed9908490611239565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a61565b600060208083528351808285015260005b81811015610f4957858101830151858201604001528201610f2d565b81811115610f5b576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610f8857600080fd5b919050565b60008060408385031215610fa057600080fd5b610fa983610f71565b946020939093013593505050565b600080600060608486031215610fcc57600080fd5b610fd584610f71565b9250610fe360208501610f71565b9150604084013590509250925092565b60006020828403121561100557600080fd5b610cf082610f71565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561103757600080fd5b823567ffffffffffffffff8082111561104f57600080fd5b818501915085601f83011261106357600080fd5b8135818111156110755761107561100e565b8060051b604051601f19603f8301168101818110858211171561109a5761109a61100e565b6040529182528482019250838101850191888311156110b857600080fd5b938501935b828510156110d6578435845293850193928501926110bd565b98975050505050505050565b6000602082840312156110f457600080fd5b5035919050565b60006020828403121561110d57600080fd5b81356001600160801b0381168114610cf057600080fd5b6000806040838503121561113757600080fd5b61114083610f71565b915061114e60208401610f71565b90509250929050565b600181811c9082168061116b57607f821691505b6020821081141561118c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156111bb576111bb611192565b500190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156111e857600080fd5b81518015158114610cf057600080fd5b600081600019048311821515161561121257611212611192565b500290565b60008261123457634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561124b5761124b611192565b50039056fea2646970667358221220c9e5151fc5ac1b9c16928db691559f1baf85cb8a9cae0928766022e8e6ce3c3a64736f6c63430008090033";

type CDAIMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CDAIMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CDAIMock__factory extends ContractFactory {
  constructor(...args: CDAIMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CDAIMock";
  }

  deploy(
    _dai: string,
    tokenOwner: string,
    interestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CDAIMock> {
    return super.deploy(
      _dai,
      tokenOwner,
      interestRateModel,
      overrides || {}
    ) as Promise<CDAIMock>;
  }
  getDeployTransaction(
    _dai: string,
    tokenOwner: string,
    interestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _dai,
      tokenOwner,
      interestRateModel,
      overrides || {}
    );
  }
  attach(address: string): CDAIMock {
    return super.attach(address) as CDAIMock;
  }
  connect(signer: Signer): CDAIMock__factory {
    return super.connect(signer) as CDAIMock__factory;
  }
  static readonly contractName: "CDAIMock";
  public readonly contractName: "CDAIMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CDAIMockInterface {
    return new utils.Interface(_abi) as CDAIMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CDAIMock {
    return new Contract(address, _abi, signerOrProvider) as CDAIMock;
  }
}
