/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IMilton, IMiltonInterface } from "../IMilton";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "calculateTimestamp",
        type: "uint256",
      },
    ],
    name: "calculateExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calculateSoap",
    outputs: [
      {
        internalType: "int256",
        name: "soapPf",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "soapRf",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "soap",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calculateSpread",
    outputs: [
      {
        internalType: "uint256",
        name: "spreadPf",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spreadRf",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "idsIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationDepositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "notionalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedInterestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ibtQuantity",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.IporSwapMemory",
        name: "swap",
        type: "tuple",
      },
    ],
    name: "calculateSwapPayFixedValue",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "idsIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationDepositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "notionalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fixedInterestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ibtQuantity",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.IporSwapMemory",
        name: "swap",
        type: "tuple",
      },
    ],
    name: "calculateSwapReceiveFixedValue",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "swapId",
        type: "uint256",
      },
    ],
    name: "closeSwapPayFixed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "swapId",
        type: "uint256",
      },
    ],
    name: "closeSwapReceiveFixed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetValue",
        type: "uint256",
      },
    ],
    name: "depositToVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAccruedBalance",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "payFixedSwaps",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiveFixedSwaps",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidityPool",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vault",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.MiltonBalanceMemory",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximumSlippage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralizationFactor",
        type: "uint256",
      },
    ],
    name: "openSwapPayFixed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximumSlippage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralizationFactor",
        type: "uint256",
      },
    ],
    name: "openSwapReceiveFixed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "joseph",
        type: "address",
      },
    ],
    name: "setJoseph",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "setupMaxAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetValue",
        type: "uint256",
      },
    ],
    name: "withdrawFromVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMilton__factory {
  static readonly abi = _abi;
  static createInterface(): IMiltonInterface {
    return new utils.Interface(_abi) as IMiltonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMilton {
    return new Contract(address, _abi, signerOrProvider) as IMilton;
  }
}
