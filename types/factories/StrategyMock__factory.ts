/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StrategyMock, StrategyMockInterface } from "../StrategyMock";

const _abi = [
  {
    inputs: [],
    name: "apy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "beforeClaim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "doClaim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getApy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUnderlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_apy",
        type: "uint256",
      },
    ],
    name: "setApy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_shareToken",
        type: "address",
      },
    ],
    name: "setShareToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlyingToken",
        type: "address",
      },
    ],
    name: "setUnderlyingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shareToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shareTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610541806100206000396000f3fe6080604052600436106101145760003560e01c80636c9fa59e116100a0578063cb4f273111610064578063cb4f2731146102fd578063d424ad9e1461030b578063ee719bc81461032b578063f2fde38b14610189578063fb1669ca1461034957600080fd5b80636c9fa59e14610294578063722713f7146102b25780638da5cb5b146102c7578063b69ef8a8146102e7578063b6b55f251461020357600080fd5b80632b4a6c51116100e75780632b4a6c51146101c65780632e1a7d4d146102035780633b3f5e36146102215780633bcfc4b81461024157806340f797bb1461025757600080fd5b80631d5188c8146101195780631fb922e01461012d5780632495a599146101515780632af4c31e14610189575b600080fd5b61012b61012736600461043d565b5050565b005b34801561013957600080fd5b506002545b6040519081526020015b60405180910390f35b34801561015d57600080fd5b50600354610171906001600160a01b031681565b6040516001600160a01b039091168152602001610148565b34801561019557600080fd5b5061012b6101a436600461048b565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b3480156101d257600080fd5b5061012b6101e136600461048b565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b34801561020f57600080fd5b5061012b61021e3660046104ad565b50565b34801561022d57600080fd5b5061012b61023c3660046104ad565b600255565b34801561024d57600080fd5b5061013e60025481565b34801561026357600080fd5b5061012b61027236600461048b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3480156102a057600080fd5b506001546001600160a01b0316610171565b3480156102be57600080fd5b5060005461013e565b3480156102d357600080fd5b50600454610171906001600160a01b031681565b3480156102f357600080fd5b5061013e60005481565b61012b6101273660046104c6565b34801561031757600080fd5b50600154610171906001600160a01b031681565b34801561033757600080fd5b506003546001600160a01b0316610171565b34801561035557600080fd5b5061012b6103643660046104ad565b600055565b80356001600160a01b038116811461038057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126103ac57600080fd5b8135602067ffffffffffffffff808311156103c9576103c9610385565b8260051b604051601f19603f830116810181811084821117156103ee576103ee610385565b60405293845285810183019383810192508785111561040c57600080fd5b83870191505b848210156104325761042382610369565b83529183019190830190610412565b979650505050505050565b6000806040838503121561045057600080fd5b61045983610369565b9150602083013567ffffffffffffffff81111561047557600080fd5b6104818582860161039b565b9150509250929050565b60006020828403121561049d57600080fd5b6104a682610369565b9392505050565b6000602082840312156104bf57600080fd5b5035919050565b600080604083850312156104d957600080fd5b823567ffffffffffffffff8111156104f057600080fd5b6104fc8582860161039b565b9560209490940135945050505056fea26469706673582212201adc72be33ad219d5b7ab033275c0b2280b40208f72390ed922940b2a928450564736f6c63430008090033";

type StrategyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StrategyMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StrategyMock__factory extends ContractFactory {
  constructor(...args: StrategyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StrategyMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StrategyMock> {
    return super.deploy(overrides || {}) as Promise<StrategyMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StrategyMock {
    return super.attach(address) as StrategyMock;
  }
  connect(signer: Signer): StrategyMock__factory {
    return super.connect(signer) as StrategyMock__factory;
  }
  static readonly contractName: "StrategyMock";
  public readonly contractName: "StrategyMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrategyMockInterface {
    return new utils.Interface(_abi) as StrategyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StrategyMock {
    return new Contract(address, _abi, signerOrProvider) as StrategyMock;
  }
}
