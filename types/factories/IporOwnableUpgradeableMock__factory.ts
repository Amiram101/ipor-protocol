/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IporOwnableUpgradeableMock,
  IporOwnableUpgradeableMockInterface,
} from "../IporOwnableUpgradeableMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "appointedOwner",
        type: "address",
      },
    ],
    name: "AppointedToTransferOwnership",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "confirmTransferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "appointedOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780638129fc1c146100665780638da5cb5b1461006e578063cc29516a1461008d578063f2fde38b14610095575b600080fd5b6100646100a8565b005b610064610113565b603354604080516001600160a01b039092168252519081900360200190f35b6100646101d4565b6100646100a33660046103cd565b610237565b6033546001600160a01b031633146101075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101116000610321565b565b600054610100900460ff1661012e5760005460ff1615610132565b303b155b6101955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016100fe565b600054610100900460ff161580156101b7576000805461ffff19166101011790555b6101bf610373565b80156101d1576000805461ff00191690555b50565b60655460408051808201909152600681526524a827a92f9b60d11b6020820152906001600160a01b0316331461021d5760405162461bcd60e51b81526004016100fe91906103fd565b50606580546001600160a01b031916905561011133610321565b6033546001600160a01b031633146102915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100fe565b60408051808201909152600781526649504f525f333760c81b60208201526001600160a01b0382166102d65760405162461bcd60e51b81526004016100fe91906103fd565b50606580546001600160a01b0319166001600160a01b0383169081179091556040517f3ec7bb1d452f3c36260fa8ef678a597fd97574d8ec42f6dc98ffce3dbc91228f90600090a250565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661039a5760405162461bcd60e51b81526004016100fe90610452565b610111600054610100900460ff166103c45760405162461bcd60e51b81526004016100fe90610452565b61011133610321565b6000602082840312156103df57600080fd5b81356001600160a01b03811681146103f657600080fd5b9392505050565b600060208083528351808285015260005b8181101561042a5785810183015185820160400152820161040e565b8181111561043c576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d31660954789d61278b62976a3d948fa2001f43c94f25547cbc50b3005c574a164736f6c63430008090033";

type IporOwnableUpgradeableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IporOwnableUpgradeableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IporOwnableUpgradeableMock__factory extends ContractFactory {
  constructor(...args: IporOwnableUpgradeableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "IporOwnableUpgradeableMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IporOwnableUpgradeableMock> {
    return super.deploy(overrides || {}) as Promise<IporOwnableUpgradeableMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IporOwnableUpgradeableMock {
    return super.attach(address) as IporOwnableUpgradeableMock;
  }
  connect(signer: Signer): IporOwnableUpgradeableMock__factory {
    return super.connect(signer) as IporOwnableUpgradeableMock__factory;
  }
  static readonly contractName: "IporOwnableUpgradeableMock";
  public readonly contractName: "IporOwnableUpgradeableMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IporOwnableUpgradeableMockInterface {
    return new utils.Interface(_abi) as IporOwnableUpgradeableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IporOwnableUpgradeableMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IporOwnableUpgradeableMock;
  }
}
