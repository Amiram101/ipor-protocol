/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AaveVariableDebtTokenMock,
  AaveVariableDebtTokenMockInterface,
} from "../AaveVariableDebtTokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_scaledTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "scaledTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516100ec3803806100ec83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b608e8061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063898a31ae146037578063b1bf962d146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b600054603f56fea26469706673582212200189269af320b52c68803b6e61dffcfb1d318c3a00e25f01a664c11657423ea464736f6c63430008090033";

type AaveVariableDebtTokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AaveVariableDebtTokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AaveVariableDebtTokenMock__factory extends ContractFactory {
  constructor(...args: AaveVariableDebtTokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AaveVariableDebtTokenMock";
  }

  deploy(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AaveVariableDebtTokenMock> {
    return super.deploy(
      value,
      overrides || {}
    ) as Promise<AaveVariableDebtTokenMock>;
  }
  getDeployTransaction(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(value, overrides || {});
  }
  attach(address: string): AaveVariableDebtTokenMock {
    return super.attach(address) as AaveVariableDebtTokenMock;
  }
  connect(signer: Signer): AaveVariableDebtTokenMock__factory {
    return super.connect(signer) as AaveVariableDebtTokenMock__factory;
  }
  static readonly contractName: "AaveVariableDebtTokenMock";
  public readonly contractName: "AaveVariableDebtTokenMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AaveVariableDebtTokenMockInterface {
    return new utils.Interface(_abi) as AaveVariableDebtTokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AaveVariableDebtTokenMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AaveVariableDebtTokenMock;
  }
}
