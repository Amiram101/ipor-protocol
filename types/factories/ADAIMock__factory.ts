/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ADAIMock, ADAIMockInterface } from "../ADAIMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dai",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "UNDERLYING_ASSET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiverOfUnderlying",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dai",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getIncentivesController",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPriceForTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a76400006007553480156200001d57600080fd5b50604051620010eb380380620010eb833981016040819052620000409162000292565b6040805180820182526004808252636144414960e01b6020808401828152855180870190965292855284015281519192916200007f91600391620001cf565b50805162000095906004906020840190620001cf565b5050600580546001600160a01b0319166001600160a01b03851617905550620000c93069d3c21bcecceda1000000620000e7565b620000df8169152d02c7e14af6800000620000e7565b50506200032e565b6001600160a01b038216620001425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001569190620002ca565b90915550506001600160a01b0382166000908152602081905260408120805483929062000185908490620002ca565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001dd90620002f1565b90600052602060002090601f0160209004810192826200020157600085556200024c565b82601f106200021c57805160ff19168380011785556200024c565b828001600101855582156200024c579182015b828111156200024c5782518255916020019190600101906200022f565b506200025a9291506200025e565b5090565b5b808211156200025a57600081556001016200025f565b80516001600160a01b03811681146200028d57600080fd5b919050565b60008060408385031215620002a657600080fd5b620002b18362000275565b9150620002c16020840162000275565b90509250929050565b60008219821115620002ec57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200030657607f821691505b602082108114156200032857634e487b7160e01b600052602260045260246000fd5b50919050565b610dad806200033e6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806395d89b41116100ad578063d7020d0a11610071578063d7020d0a14610294578063db006a75146102a7578063dd62ed3e146102ba578063f4b9fa75146102f3578063f77c47911461030657600080fd5b806395d89b411461024c578063a035b1fe14610254578063a457c2d71461025d578063a9059cbb14610270578063b16a19de1461028357600080fd5b80633549eb53116100f45780633549eb53146101a657806339509351146101bb57806370a08231146101ce57806375d26413146101f757806392eefe9b1461021c57600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd14610184578063313ce56714610197575b600080fd5b610139610319565b6040516101469190610b4e565b60405180910390f35b61016261015d366004610bbf565b6103ab565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004610be9565b6103c3565b60405160128152602001610146565b6101b96101b4366004610c25565b600755565b005b6101626101c9366004610bbf565b6103e7565b6101766101dc366004610c3e565b6001600160a01b031660009081526020819052604090205490565b6006546001600160a01b03165b6040516001600160a01b039091168152602001610146565b6101b961022a366004610c3e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610139610426565b61017660075481565b61016261026b366004610bbf565b610435565b61016261027e366004610bbf565b6104cc565b6005546001600160a01b0316610204565b6101b96102a2366004610c60565b6104da565b6101b96102b5366004610c25565b6105b4565b6101766102c8366004610ca2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600554610204906001600160a01b031681565b600654610204906001600160a01b031681565b60606003805461032890610cd5565b80601f016020809104026020016040519081016040528092919081815260200182805461035490610cd5565b80156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b5050505050905090565b6000336103b9818585610689565b5060019392505050565b6000336103d18582856107ae565b6103dc85858561083a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906103b99082908690610421908790610d26565b610689565b60606004805461032890610cd5565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156104bf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103dc8286868403610689565b6000336103b981858561083a565b6104e48483610a08565b60055460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610d3e565b6105ae5760405162461bcd60e51b815260206004820152601560248201527422b93937b910323ab934b733903a3930b739b332b960591b60448201526064016104b6565b50505050565b6105be3382610a08565b60055460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561060a57600080fd5b505af115801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190610d3e565b6106865760405162461bcd60e51b815260206004820152601560248201527422b93937b910323ab934b733903a3930b739b332b960591b60448201526064016104b6565b50565b6001600160a01b0383166106eb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104b6565b6001600160a01b03821661074c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104b6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146105ae578181101561082d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104b6565b6105ae8484848403610689565b6001600160a01b03831661089e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104b6565b6001600160a01b0382166109005760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104b6565b6001600160a01b038316600090815260208190526040902054818110156109785760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104b6565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906109af908490610d26565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109fb91815260200190565b60405180910390a36105ae565b6001600160a01b038216610a685760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104b6565b6001600160a01b03821660009081526020819052604090205481811015610adc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104b6565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b0b908490610d60565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016107a1565b600060208083528351808285015260005b81811015610b7b57858101830151858201604001528201610b5f565b81811115610b8d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610bba57600080fd5b919050565b60008060408385031215610bd257600080fd5b610bdb83610ba3565b946020939093013593505050565b600080600060608486031215610bfe57600080fd5b610c0784610ba3565b9250610c1560208501610ba3565b9150604084013590509250925092565b600060208284031215610c3757600080fd5b5035919050565b600060208284031215610c5057600080fd5b610c5982610ba3565b9392505050565b60008060008060808587031215610c7657600080fd5b610c7f85610ba3565b9350610c8d60208601610ba3565b93969395505050506040820135916060013590565b60008060408385031215610cb557600080fd5b610cbe83610ba3565b9150610ccc60208401610ba3565b90509250929050565b600181811c90821680610ce957607f821691505b60208210811415610d0a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610d3957610d39610d10565b500190565b600060208284031215610d5057600080fd5b81518015158114610c5957600080fd5b600082821015610d7257610d72610d10565b50039056fea2646970667358221220b7697060594201811a15019255cf3dcdbac67e97b7c3f85c6a9bb8cba7149e1464736f6c63430008090033";

type ADAIMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ADAIMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ADAIMock__factory extends ContractFactory {
  constructor(...args: ADAIMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ADAIMock";
  }

  deploy(
    _dai: string,
    tokenOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ADAIMock> {
    return super.deploy(_dai, tokenOwner, overrides || {}) as Promise<ADAIMock>;
  }
  getDeployTransaction(
    _dai: string,
    tokenOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_dai, tokenOwner, overrides || {});
  }
  attach(address: string): ADAIMock {
    return super.attach(address) as ADAIMock;
  }
  connect(signer: Signer): ADAIMock__factory {
    return super.connect(signer) as ADAIMock__factory;
  }
  static readonly contractName: "ADAIMock";
  public readonly contractName: "ADAIMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ADAIMockInterface {
    return new utils.Interface(_abi) as ADAIMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ADAIMock {
    return new Contract(address, _abi, signerOrProvider) as ADAIMock;
  }
}
