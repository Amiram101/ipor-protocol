/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MiltonConfiguration,
  MiltonConfigurationInterface,
} from "../MiltonConfiguration";

const _abi = [
  {
    inputs: [],
    name: "getIncomeTaxPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getIporPublicationFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getLiquidationDepositAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxCollateralizationFactorValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxLpUtilizationPerLegPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxLpUtilizationPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxSlippagePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMaxSwapCollateralAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMiltonSpreadModel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinCollateralizationFactorValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getOpeningFeeForTreasuryPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getOpeningFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80636cfa7788116100715780636cfa7788146101285780636d76369214610138578063753aa47e1461013f578063b45692361461014d578063b8e912741461015c578063c3e889e71461011a57600080fd5b806309a07790146100b957806311c94d1d146100d557806342ed6239146100e35780634cfaa57c146100fe5780634d31f1941461010c5780635c9bbc181461011a575b600080fd5b660110d9316ec0005b6040519081526020015b60405180910390f35b67016345785d8a00006100c2565b6005546040516001600160a01b0390911681526020016100cc565b6706a94d74f43000006100c2565b670de0b6b3a76400006100c2565b678ac7230489e800006100c2565b69152d02c7e14af68000006100c2565b60006100c2565b670b1a2bc2ec5000006100c2565b6801158e460913d000006100c2565b683635c9adc5dea000006100c256fea2646970667358221220d88d9b92523e812a5ae90c74df3b93e898a318f52e2a9a28e2c6dc5aa5bf404064736f6c63430008090033";

type MiltonConfigurationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MiltonConfigurationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MiltonConfiguration__factory extends ContractFactory {
  constructor(...args: MiltonConfigurationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MiltonConfiguration";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MiltonConfiguration> {
    return super.deploy(overrides || {}) as Promise<MiltonConfiguration>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MiltonConfiguration {
    return super.attach(address) as MiltonConfiguration;
  }
  connect(signer: Signer): MiltonConfiguration__factory {
    return super.connect(signer) as MiltonConfiguration__factory;
  }
  static readonly contractName: "MiltonConfiguration";
  public readonly contractName: "MiltonConfiguration";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MiltonConfigurationInterface {
    return new utils.Interface(_abi) as MiltonConfigurationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MiltonConfiguration {
    return new Contract(address, _abi, signerOrProvider) as MiltonConfiguration;
  }
}
