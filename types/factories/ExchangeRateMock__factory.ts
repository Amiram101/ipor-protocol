/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExchangeRateMock,
  ExchangeRateMockInterface,
} from "../ExchangeRateMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalAssetsDollar",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalTokensIssued",
        type: "uint256",
      },
    ],
    name: "calculateExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631917d90614610030575b600080fd5b61004361003e3660046100c3565b610055565b60405190815260200160405180910390f35b6000610061838361006a565b90505b92915050565b6000811580610077575082155b1561008b5750670de0b6b3a7640000610064565b6100616100a084670de0b6b3a76400006100fb565b836000816100af60028261011a565b6100b9908561013c565b610061919061011a565b600080604083850312156100d657600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610115576101156100e5565b500290565b60008261013757634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561014f5761014f6100e5565b50019056fea26469706673582212209a4e6fe13df0b76711cbc5a66639c921a639684f246c6b7d09abdb20548334ae64736f6c63430008090033";

type ExchangeRateMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeRateMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeRateMock__factory extends ContractFactory {
  constructor(...args: ExchangeRateMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ExchangeRateMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExchangeRateMock> {
    return super.deploy(overrides || {}) as Promise<ExchangeRateMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExchangeRateMock {
    return super.attach(address) as ExchangeRateMock;
  }
  connect(signer: Signer): ExchangeRateMock__factory {
    return super.connect(signer) as ExchangeRateMock__factory;
  }
  static readonly contractName: "ExchangeRateMock";
  public readonly contractName: "ExchangeRateMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeRateMockInterface {
    return new utils.Interface(_abi) as ExchangeRateMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeRateMock {
    return new Contract(address, _abi, signerOrProvider) as ExchangeRateMock;
  }
}
