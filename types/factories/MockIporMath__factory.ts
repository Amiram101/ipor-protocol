/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockIporMath, MockIporMathInterface } from "../MockIporMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "absoluteValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "assetDecimals",
        type: "uint256",
      },
    ],
    name: "convertToWad",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "assetDecimals",
        type: "uint256",
      },
    ],
    name: "convertWadToAssetDecimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "division",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "divisionInt",
    outputs: [
      {
        internalType: "int256",
        name: "z",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061047e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e778d6e1461005c5780639184895514610081578063e006805214610094578063e149e7b0146100a7578063ff9d4159146100ba575b600080fd5b61006f61006a366004610203565b6100cd565b60405190815260200160405180910390f35b61006f61008f366004610203565b6100e2565b61006f6100a2366004610203565b6100ee565b61006f6100b5366004610225565b6100fa565b61006f6100c8366004610203565b610105565b60006100d98383610111565b90505b92915050565b60006100d98383610172565b60006100d983836101a7565b60006100dc826101c9565b60006100d983836101e1565b600081601214156101235750816100dc565b601282111561015357610137601283610254565b61014290600a61034f565b61014c908461035b565b90506100dc565b61014c83610162846012610254565b61016d90600a61034f565b6101a7565b600081601214156101845750816100dc565b601282111561019c5761014c83610162601285610254565b610137826012610254565b6000816101b5600282610390565b6101bf90856103a4565b6100d99190610390565b60008082126101d857816100dc565b6100dc826103bc565b6000816101ef6002826103d9565b6101f99085610407565b6100d991906103d9565b6000806040838503121561021657600080fd5b50508035926020909101359150565b60006020828403121561023757600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156102665761026661023e565b500390565b600181815b808511156102a657816000190482111561028c5761028c61023e565b8085161561029957918102915b93841c9390800290610270565b509250929050565b6000826102bd575060016100dc565b816102ca575060006100dc565b81600181146102e057600281146102ea57610306565b60019150506100dc565b60ff8411156102fb576102fb61023e565b50506001821b6100dc565b5060208310610133831016604e8410600b8410161715610329575081810a6100dc565b610333838361026b565b80600019048211156103475761034761023e565b029392505050565b60006100d983836102ae565b60008160001904831182151516156103755761037561023e565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261039f5761039f61037a565b500490565b600082198211156103b7576103b761023e565b500190565b6000600160ff1b8214156103d2576103d261023e565b5060000390565b6000826103e8576103e861037a565b600160ff1b8214600019841416156104025761040261023e565b500590565b600080821280156001600160ff1b03849003851316156104295761042961023e565b600160ff1b83900384128116156104425761044261023e565b5050019056fea26469706673582212208289bcde706f9e577f153a64276047adb28ec86cfdfc9a31ff1ca20a0aa9dc9664736f6c63430008090033";

type MockIporMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockIporMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockIporMath__factory extends ContractFactory {
  constructor(...args: MockIporMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockIporMath";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockIporMath> {
    return super.deploy(overrides || {}) as Promise<MockIporMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockIporMath {
    return super.attach(address) as MockIporMath;
  }
  connect(signer: Signer): MockIporMath__factory {
    return super.connect(signer) as MockIporMath__factory;
  }
  static readonly contractName: "MockIporMath";
  public readonly contractName: "MockIporMath";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIporMathInterface {
    return new utils.Interface(_abi) as MockIporMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockIporMath {
    return new Contract(address, _abi, signerOrProvider) as MockIporMath;
  }
}
