/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IMiltonFrontendDataProvider,
  IMiltonFrontendDataProviderInterface,
} from "../IMiltonFrontendDataProvider";

const _abi = [
  {
    inputs: [],
    name: "getConfiguration",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minCollateralizationFactorValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCollateralizationFactorValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "openingFeePercentage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "iporPublicationFeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationDepositAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "incomeTaxPercentage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spreadPayFixedValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spreadRecFixedValue",
            type: "uint256",
          },
        ],
        internalType:
          "struct IMiltonFrontendDataProvider.IporAssetConfigurationFront[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getIpTokenExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getMySwaps",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "collateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "notionalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateralizationFactor",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "direction",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "fixedInterestRate",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "positionValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "startingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endingTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationDepositAmount",
            type: "uint256",
          },
        ],
        internalType: "struct IMiltonFrontendDataProvider.IporSwapFront[]",
        name: "items",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getTotalOutstandingNotional",
    outputs: [
      {
        internalType: "uint256",
        name: "payFixedTotalNotional",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "recFixedTotalNotional",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IMiltonFrontendDataProvider__factory {
  static readonly abi = _abi;
  static createInterface(): IMiltonFrontendDataProviderInterface {
    return new utils.Interface(_abi) as IMiltonFrontendDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMiltonFrontendDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IMiltonFrontendDataProvider;
  }
}
