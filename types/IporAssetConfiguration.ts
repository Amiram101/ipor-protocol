/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IporAssetConfigurationInterface extends utils.Interface {
  contractName: "IporAssetConfiguration";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "getAssetManagementVault()": FunctionFragment;
    "getCharlieTreasurer()": FunctionFragment;
    "getDecimals()": FunctionFragment;
    "getIpToken()": FunctionFragment;
    "getJoseph()": FunctionFragment;
    "getMilton()": FunctionFragment;
    "getMiltonStorage()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMembers(bytes32)": FunctionFragment;
    "getTreasureTreasurer()": FunctionFragment;
    "getUserRoles(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAssetManagementVault(address)": FunctionFragment;
    "setCharlieTreasurer(address)": FunctionFragment;
    "setJoseph(address)": FunctionFragment;
    "setMilton(address)": FunctionFragment;
    "setMiltonStorage(address)": FunctionFragment;
    "setTreasureTreasurer(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetManagementVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCharlieTreasurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIpToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getJoseph", values?: undefined): string;
  encodeFunctionData(functionFragment: "getMilton", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMiltonStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasureTreasurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetManagementVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCharlieTreasurer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setJoseph", values: [string]): string;
  encodeFunctionData(functionFragment: "setMilton", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMiltonStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasureTreasurer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetManagementVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCharlieTreasurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJoseph", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMilton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMiltonStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasureTreasurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetManagementVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCharlieTreasurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJoseph", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMilton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMiltonStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasureTreasurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssetManagementVaultUpdated(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CharlieTreasurerUpdated(address,address)": EventFragment;
    "JosephAddressUpdated(address)": EventFragment;
    "MiltonAddressUpdated(address)": EventFragment;
    "MiltonStorageAddressUpdated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TreasureTreasurerUpdated(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetManagementVaultUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CharlieTreasurerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JosephAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MiltonAddressUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MiltonStorageAddressUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasureTreasurerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AssetManagementVaultUpdatedEvent = TypedEvent<
  [string, string],
  { asset: string; newAssetManagementVaultAddress: string }
>;

export type AssetManagementVaultUpdatedEventFilter =
  TypedEventFilter<AssetManagementVaultUpdatedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CharlieTreasurerUpdatedEvent = TypedEvent<
  [string, string],
  { asset: string; newCharlieTreasurer: string }
>;

export type CharlieTreasurerUpdatedEventFilter =
  TypedEventFilter<CharlieTreasurerUpdatedEvent>;

export type JosephAddressUpdatedEvent = TypedEvent<
  [string],
  { newJosephAddress: string }
>;

export type JosephAddressUpdatedEventFilter =
  TypedEventFilter<JosephAddressUpdatedEvent>;

export type MiltonAddressUpdatedEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type MiltonAddressUpdatedEventFilter =
  TypedEventFilter<MiltonAddressUpdatedEvent>;

export type MiltonStorageAddressUpdatedEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type MiltonStorageAddressUpdatedEventFilter =
  TypedEventFilter<MiltonStorageAddressUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TreasureTreasurerUpdatedEvent = TypedEvent<
  [string, string],
  { asset: string; newTreasureTreasurer: string }
>;

export type TreasureTreasurerUpdatedEventFilter =
  TypedEventFilter<TreasureTreasurerUpdatedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface IporAssetConfiguration extends BaseContract {
  contractName: "IporAssetConfiguration";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IporAssetConfigurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    getAssetManagementVault(overrides?: CallOverrides): Promise<[string]>;

    "getAssetManagementVault()"(overrides?: CallOverrides): Promise<[string]>;

    getCharlieTreasurer(overrides?: CallOverrides): Promise<[string]>;

    "getCharlieTreasurer()"(overrides?: CallOverrides): Promise<[string]>;

    getDecimals(overrides?: CallOverrides): Promise<[number]>;

    "getDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    getIpToken(overrides?: CallOverrides): Promise<[string]>;

    "getIpToken()"(overrides?: CallOverrides): Promise<[string]>;

    getJoseph(overrides?: CallOverrides): Promise<[string]>;

    "getJoseph()"(overrides?: CallOverrides): Promise<[string]>;

    getMilton(overrides?: CallOverrides): Promise<[string]>;

    "getMilton()"(overrides?: CallOverrides): Promise<[string]>;

    getMiltonStorage(overrides?: CallOverrides): Promise<[string]>;

    "getMiltonStorage()"(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMembers(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRoleMembers(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTreasureTreasurer(overrides?: CallOverrides): Promise<[string]>;

    "getTreasureTreasurer()"(overrides?: CallOverrides): Promise<[string]>;

    getUserRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getUserRoles(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssetManagementVault(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAssetManagementVault(address)"(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCharlieTreasurer(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCharlieTreasurer(address)"(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMiltonStorage(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMiltonStorage(address)"(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasureTreasurer(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasureTreasurer(address)"(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  getAssetManagementVault(overrides?: CallOverrides): Promise<string>;

  "getAssetManagementVault()"(overrides?: CallOverrides): Promise<string>;

  getCharlieTreasurer(overrides?: CallOverrides): Promise<string>;

  "getCharlieTreasurer()"(overrides?: CallOverrides): Promise<string>;

  getDecimals(overrides?: CallOverrides): Promise<number>;

  "getDecimals()"(overrides?: CallOverrides): Promise<number>;

  getIpToken(overrides?: CallOverrides): Promise<string>;

  "getIpToken()"(overrides?: CallOverrides): Promise<string>;

  getJoseph(overrides?: CallOverrides): Promise<string>;

  "getJoseph()"(overrides?: CallOverrides): Promise<string>;

  getMilton(overrides?: CallOverrides): Promise<string>;

  "getMilton()"(overrides?: CallOverrides): Promise<string>;

  getMiltonStorage(overrides?: CallOverrides): Promise<string>;

  "getMiltonStorage()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  "getRoleMembers(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTreasureTreasurer(overrides?: CallOverrides): Promise<string>;

  "getTreasureTreasurer()"(overrides?: CallOverrides): Promise<string>;

  getUserRoles(account: string, overrides?: CallOverrides): Promise<string[]>;

  "getUserRoles(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    asset: string,
    ipToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    asset: string,
    ipToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssetManagementVault(
    newAssetManagementVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAssetManagementVault(address)"(
    newAssetManagementVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCharlieTreasurer(
    newCharlieTreasurer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCharlieTreasurer(address)"(
    newCharlieTreasurer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoseph(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoseph(address)"(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMilton(
    milton: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMilton(address)"(
    milton: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMiltonStorage(
    miltonStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMiltonStorage(address)"(
    miltonStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasureTreasurer(
    newTreasureTreasurer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasureTreasurer(address)"(
    newTreasureTreasurer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    getAssetManagementVault(overrides?: CallOverrides): Promise<string>;

    "getAssetManagementVault()"(overrides?: CallOverrides): Promise<string>;

    getCharlieTreasurer(overrides?: CallOverrides): Promise<string>;

    "getCharlieTreasurer()"(overrides?: CallOverrides): Promise<string>;

    getDecimals(overrides?: CallOverrides): Promise<number>;

    "getDecimals()"(overrides?: CallOverrides): Promise<number>;

    getIpToken(overrides?: CallOverrides): Promise<string>;

    "getIpToken()"(overrides?: CallOverrides): Promise<string>;

    getJoseph(overrides?: CallOverrides): Promise<string>;

    "getJoseph()"(overrides?: CallOverrides): Promise<string>;

    getMilton(overrides?: CallOverrides): Promise<string>;

    "getMilton()"(overrides?: CallOverrides): Promise<string>;

    getMiltonStorage(overrides?: CallOverrides): Promise<string>;

    "getMiltonStorage()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMembers(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRoleMembers(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTreasureTreasurer(overrides?: CallOverrides): Promise<string>;

    "getTreasureTreasurer()"(overrides?: CallOverrides): Promise<string>;

    getUserRoles(account: string, overrides?: CallOverrides): Promise<string[]>;

    "getUserRoles(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      asset: string,
      ipToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      asset: string,
      ipToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetManagementVault(
      newAssetManagementVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetManagementVault(address)"(
      newAssetManagementVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCharlieTreasurer(
      newCharlieTreasurer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCharlieTreasurer(address)"(
      newCharlieTreasurer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setJoseph(joseph: string, overrides?: CallOverrides): Promise<void>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMilton(milton: string, overrides?: CallOverrides): Promise<void>;

    "setMilton(address)"(
      milton: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMiltonStorage(
      miltonStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMiltonStorage(address)"(
      miltonStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasureTreasurer(
      newTreasureTreasurer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasureTreasurer(address)"(
      newTreasureTreasurer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AssetManagementVaultUpdated(address,address)"(
      asset?: string | null,
      newAssetManagementVaultAddress?: string | null
    ): AssetManagementVaultUpdatedEventFilter;
    AssetManagementVaultUpdated(
      asset?: string | null,
      newAssetManagementVaultAddress?: string | null
    ): AssetManagementVaultUpdatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CharlieTreasurerUpdated(address,address)"(
      asset?: null,
      newCharlieTreasurer?: string | null
    ): CharlieTreasurerUpdatedEventFilter;
    CharlieTreasurerUpdated(
      asset?: null,
      newCharlieTreasurer?: string | null
    ): CharlieTreasurerUpdatedEventFilter;

    "JosephAddressUpdated(address)"(
      newJosephAddress?: string | null
    ): JosephAddressUpdatedEventFilter;
    JosephAddressUpdated(
      newJosephAddress?: string | null
    ): JosephAddressUpdatedEventFilter;

    "MiltonAddressUpdated(address)"(
      newAddress?: string | null
    ): MiltonAddressUpdatedEventFilter;
    MiltonAddressUpdated(
      newAddress?: string | null
    ): MiltonAddressUpdatedEventFilter;

    "MiltonStorageAddressUpdated(address)"(
      newAddress?: string | null
    ): MiltonStorageAddressUpdatedEventFilter;
    MiltonStorageAddressUpdated(
      newAddress?: string | null
    ): MiltonStorageAddressUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TreasureTreasurerUpdated(address,address)"(
      asset?: null,
      newTreasureTreasurer?: string | null
    ): TreasureTreasurerUpdatedEventFilter;
    TreasureTreasurerUpdated(
      asset?: null,
      newTreasureTreasurer?: string | null
    ): TreasureTreasurerUpdatedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetManagementVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getAssetManagementVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCharlieTreasurer(overrides?: CallOverrides): Promise<BigNumber>;

    "getCharlieTreasurer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "getDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getIpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getJoseph(overrides?: CallOverrides): Promise<BigNumber>;

    "getJoseph()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMilton(overrides?: CallOverrides): Promise<BigNumber>;

    "getMilton()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMiltonStorage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMiltonStorage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMembers(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMembers(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasureTreasurer(overrides?: CallOverrides): Promise<BigNumber>;

    "getTreasureTreasurer()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRoles(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssetManagementVault(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAssetManagementVault(address)"(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCharlieTreasurer(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCharlieTreasurer(address)"(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMiltonStorage(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMiltonStorage(address)"(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasureTreasurer(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasureTreasurer(address)"(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetManagementVault(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetManagementVault()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCharlieTreasurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCharlieTreasurer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getIpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJoseph(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getJoseph()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMilton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMilton()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMiltonStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMiltonStorage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMembers(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMembers(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasureTreasurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTreasureTreasurer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoles(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRoles(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      asset: string,
      ipToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssetManagementVault(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAssetManagementVault(address)"(
      newAssetManagementVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCharlieTreasurer(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCharlieTreasurer(address)"(
      newCharlieTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMilton(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMilton(address)"(
      milton: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMiltonStorage(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMiltonStorage(address)"(
      miltonStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasureTreasurer(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasureTreasurer(address)"(
      newTreasureTreasurer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
