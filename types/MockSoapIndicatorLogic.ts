/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type SoapIndicatorMemoryStruct = {
    rebalanceTimestamp: BigNumberish;
    totalNotional: BigNumberish;
    averageInterestRate: BigNumberish;
    totalIbtQuantity: BigNumberish;
    quasiHypotheticalInterestCumulative: BigNumberish;
  };

  export type SoapIndicatorMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    rebalanceTimestamp: BigNumber;
    totalNotional: BigNumber;
    averageInterestRate: BigNumber;
    totalIbtQuantity: BigNumber;
    quasiHypotheticalInterestCumulative: BigNumber;
  };
}

export interface MockSoapIndicatorLogicInterface extends utils.Interface {
  contractName: "MockSoapIndicatorLogic";
  functions: {
    "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateInterestRateWhenCloseSwap",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRateWhenOpenSwap",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiHyphoteticalInterestTotal",
    values: [DataTypes.SoapIndicatorMemoryStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiHypotheticalInterestDelta",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiInterestPaidOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiSoapPayFixed",
    values: [DataTypes.SoapIndicatorMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuasiSoapReceiveFixed",
    values: [DataTypes.SoapIndicatorMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoapPayFixed",
    values: [DataTypes.SoapIndicatorMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoapReceiveFixed",
    values: [DataTypes.SoapIndicatorMemoryStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceWhenCloseSwap",
    values: [
      DataTypes.SoapIndicatorMemoryStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceWhenOpenSwap",
    values: [
      DataTypes.SoapIndicatorMemoryStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateInterestRateWhenCloseSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRateWhenOpenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiHyphoteticalInterestTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiHypotheticalInterestDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiInterestPaidOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiSoapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuasiSoapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceWhenCloseSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceWhenOpenSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockSoapIndicatorLogic extends BaseContract {
  contractName: "MockSoapIndicatorLogic";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockSoapIndicatorLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateInterestRateWhenCloseSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateInterestRateWhenOpenSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiHyphoteticalInterestTotal(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiHypotheticalInterestDelta(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiInterestPaidOut(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateQuasiSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalanceWhenCloseSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SoapIndicatorMemoryStructOutput]>;

    "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SoapIndicatorMemoryStructOutput]>;

    rebalanceWhenOpenSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SoapIndicatorMemoryStructOutput]>;

    "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.SoapIndicatorMemoryStructOutput]>;
  };

  calculateInterestRateWhenCloseSwap(
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)"(
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateInterestRateWhenOpenSwap(
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)"(
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiHyphoteticalInterestTotal(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiHypotheticalInterestDelta(
    calculateTimestamp: BigNumberish,
    lastRebalanceTimestamp: BigNumberish,
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)"(
    calculateTimestamp: BigNumberish,
    lastRebalanceTimestamp: BigNumberish,
    totalNotional: BigNumberish,
    averageInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiInterestPaidOut(
    calculateTimestamp: BigNumberish,
    derivativeOpenTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)"(
    calculateTimestamp: BigNumberish,
    derivativeOpenTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiSoapPayFixed(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuasiSoapReceiveFixed(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSoapPayFixed(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSoapReceiveFixed(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    calculateTimestamp: BigNumberish,
    ibtPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalanceWhenCloseSwap(
    si: DataTypes.SoapIndicatorMemoryStruct,
    rebalanceTimestamp: BigNumberish,
    derivativeOpenTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    derivativeIbtQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

  "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    rebalanceTimestamp: BigNumberish,
    derivativeOpenTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    derivativeIbtQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

  rebalanceWhenOpenSwap(
    si: DataTypes.SoapIndicatorMemoryStruct,
    rebalanceTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    derivativeIbtQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

  "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
    si: DataTypes.SoapIndicatorMemoryStruct,
    rebalanceTimestamp: BigNumberish,
    derivativeNotional: BigNumberish,
    swapFixedInterestRate: BigNumberish,
    derivativeIbtQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

  callStatic: {
    calculateInterestRateWhenCloseSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestRateWhenOpenSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiHyphoteticalInterestTotal(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiHypotheticalInterestDelta(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiInterestPaidOut(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceWhenCloseSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

    "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

    rebalanceWhenOpenSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;

    "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.SoapIndicatorMemoryStructOutput>;
  };

  filters: {};

  estimateGas: {
    calculateInterestRateWhenCloseSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterestRateWhenOpenSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiHyphoteticalInterestTotal(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiHypotheticalInterestDelta(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiInterestPaidOut(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuasiSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceWhenCloseSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceWhenOpenSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateInterestRateWhenCloseSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRateWhenCloseSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterestRateWhenOpenSwap(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRateWhenOpenSwap(uint256,uint256,uint256,uint256)"(
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiHyphoteticalInterestTotal(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiHyphoteticalInterestTotal((uint256,uint256,uint256,uint256,uint256),uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiHypotheticalInterestDelta(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiHypotheticalInterestDelta(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      lastRebalanceTimestamp: BigNumberish,
      totalNotional: BigNumberish,
      averageInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiInterestPaidOut(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiInterestPaidOut(uint256,uint256,uint256,uint256)"(
      calculateTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuasiSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuasiSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoapPayFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSoapPayFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoapReceiveFixed(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSoapReceiveFixed((uint256,uint256,uint256,uint256,uint256),uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      calculateTimestamp: BigNumberish,
      ibtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceWhenCloseSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rebalanceWhenCloseSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeOpenTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceWhenOpenSwap(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rebalanceWhenOpenSwap((uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256)"(
      si: DataTypes.SoapIndicatorMemoryStruct,
      rebalanceTimestamp: BigNumberish,
      derivativeNotional: BigNumberish,
      swapFixedInterestRate: BigNumberish,
      derivativeIbtQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
