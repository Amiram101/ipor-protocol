/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type AccruedIporStruct = {
    indexValue: BigNumberish;
    ibtPrice: BigNumberish;
    exponentialMovingAverage: BigNumberish;
    exponentialWeightedMovingVariance: BigNumberish;
  };

  export type AccruedIporStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    indexValue: BigNumber;
    ibtPrice: BigNumber;
    exponentialMovingAverage: BigNumber;
    exponentialWeightedMovingVariance: BigNumber;
  };

  export type MiltonBalanceMemoryStruct = {
    payFixedSwaps: BigNumberish;
    receiveFixedSwaps: BigNumberish;
    liquidityPool: BigNumberish;
    vault: BigNumberish;
  };

  export type MiltonBalanceMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payFixedSwaps: BigNumber;
    receiveFixedSwaps: BigNumber;
    liquidityPool: BigNumber;
    vault: BigNumber;
  };
}

export interface MiltonSpreadModelInterface extends utils.Interface {
  contractName: "MiltonSpreadModel";
  functions: {
    "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "confirmTransferOwnership()": FunctionFragment;
    "getAtParComponentKHistValue()": FunctionFragment;
    "getAtParComponentKVolValue()": FunctionFragment;
    "getDCKOmegaValue()": FunctionFragment;
    "getDCKfValue()": FunctionFragment;
    "getDCLambdaValue()": FunctionFragment;
    "getDCMaxLiquidityRedemptionValue()": FunctionFragment;
    "getSpreadPremiumsMaxValue()": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateQuotePayFixed",
    values: [
      BigNumberish,
      DataTypes.AccruedIporStruct,
      DataTypes.MiltonBalanceMemoryStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuoteReceiveFixed",
    values: [
      BigNumberish,
      DataTypes.AccruedIporStruct,
      DataTypes.MiltonBalanceMemoryStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpreadPayFixed",
    values: [
      BigNumberish,
      DataTypes.AccruedIporStruct,
      DataTypes.MiltonBalanceMemoryStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpreadRecFixed",
    values: [
      BigNumberish,
      DataTypes.AccruedIporStruct,
      DataTypes.MiltonBalanceMemoryStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAtParComponentKHistValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAtParComponentKVolValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCKOmegaValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCKfValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCLambdaValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCMaxLiquidityRedemptionValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpreadPremiumsMaxValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateQuotePayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuoteReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpreadPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpreadRecFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAtParComponentKHistValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAtParComponentKVolValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCKOmegaValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCKfValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCLambdaValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCMaxLiquidityRedemptionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpreadPremiumsMaxValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AppointedToTransferOwnership(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppointedToTransferOwnership"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AppointedToTransferOwnershipEvent = TypedEvent<
  [string],
  { appointedOwner: string }
>;

export type AppointedToTransferOwnershipEventFilter =
  TypedEventFilter<AppointedToTransferOwnershipEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MiltonSpreadModel extends BaseContract {
  contractName: "MiltonSpreadModel";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiltonSpreadModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateQuotePayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteValue: BigNumber }>;

    "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteValue: BigNumber }>;

    calculateQuoteReceiveFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteValue: BigNumber }>;

    "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteValue: BigNumber }>;

    calculateSpreadPayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spreadValue: BigNumber }>;

    "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spreadValue: BigNumber }>;

    calculateSpreadRecFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spreadValue: BigNumber }>;

    "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { spreadValue: BigNumber }>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAtParComponentKHistValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAtParComponentKHistValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAtParComponentKVolValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAtParComponentKVolValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDCKOmegaValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDCKOmegaValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDCKfValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDCKfValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDCLambdaValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDCLambdaValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDCMaxLiquidityRedemptionValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDCMaxLiquidityRedemptionValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpreadPremiumsMaxValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSpreadPremiumsMaxValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateQuotePayFixed(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateQuoteReceiveFixed(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSpreadPayFixed(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSpreadRecFixed(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
    soap: BigNumberish,
    accruedIpor: DataTypes.AccruedIporStruct,
    accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  confirmTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmTransferOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAtParComponentKHistValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getAtParComponentKHistValue()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAtParComponentKVolValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getAtParComponentKVolValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDCKOmegaValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getDCKOmegaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDCKfValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getDCKfValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDCLambdaValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getDCLambdaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDCMaxLiquidityRedemptionValue(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDCMaxLiquidityRedemptionValue()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpreadPremiumsMaxValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getSpreadPremiumsMaxValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateQuotePayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuoteReceiveFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpreadPayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpreadRecFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(overrides?: CallOverrides): Promise<void>;

    "confirmTransferOwnership()"(overrides?: CallOverrides): Promise<void>;

    getAtParComponentKHistValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getAtParComponentKHistValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAtParComponentKVolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getAtParComponentKVolValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDCKOmegaValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCKOmegaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCKfValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCKfValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCLambdaValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCLambdaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCMaxLiquidityRedemptionValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDCMaxLiquidityRedemptionValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpreadPremiumsMaxValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getSpreadPremiumsMaxValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AppointedToTransferOwnership(address)"(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;
    AppointedToTransferOwnership(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    calculateQuotePayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateQuoteReceiveFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpreadPayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpreadRecFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAtParComponentKHistValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getAtParComponentKHistValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAtParComponentKVolValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getAtParComponentKVolValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDCKOmegaValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCKOmegaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCKfValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCKfValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCLambdaValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getDCLambdaValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDCMaxLiquidityRedemptionValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDCMaxLiquidityRedemptionValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpreadPremiumsMaxValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getSpreadPremiumsMaxValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateQuotePayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuotePayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateQuoteReceiveFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateQuoteReceiveFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSpreadPayFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSpreadPayFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSpreadRecFixed(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSpreadRecFixed(int256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))"(
      soap: BigNumberish,
      accruedIpor: DataTypes.AccruedIporStruct,
      accruedBalance: DataTypes.MiltonBalanceMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAtParComponentKHistValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAtParComponentKHistValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAtParComponentKVolValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAtParComponentKVolValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDCKOmegaValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDCKOmegaValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDCKfValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDCKfValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDCLambdaValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDCLambdaValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDCMaxLiquidityRedemptionValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDCMaxLiquidityRedemptionValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpreadPremiumsMaxValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpreadPremiumsMaxValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
