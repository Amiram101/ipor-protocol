/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type IporSwapIndicatorStruct = {
    iporIndexValue: BigNumberish;
    ibtPrice: BigNumberish;
    ibtQuantity: BigNumberish;
    fixedInterestRate: BigNumberish;
  };

  export type IporSwapIndicatorStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    iporIndexValue: BigNumber;
    ibtPrice: BigNumber;
    ibtQuantity: BigNumber;
    fixedInterestRate: BigNumber;
  };
}

export interface IMiltonEventsInterface extends utils.Interface {
  contractName: "IMiltonEvents";
  functions: {};

  events: {
    "CloseSwap(uint256,address,uint256)": EventFragment;
    "OpenSwap(uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256,tuple,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CloseSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenSwap"): EventFragment;
}

export type CloseSwapEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { swapId: BigNumber; asset: string; closeTimestamp: BigNumber }
>;

export type CloseSwapEventFilter = TypedEventFilter<CloseSwapEvent>;

export type OpenSwapEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    DataTypes.IporSwapIndicatorStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    swapId: BigNumber;
    buyer: string;
    asset: string;
    direction: number;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    indicator: DataTypes.IporSwapIndicatorStructOutput;
    openingAmount: BigNumber;
    iporPublicationAmount: BigNumber;
    spreadValue: BigNumber;
  }
>;

export type OpenSwapEventFilter = TypedEventFilter<OpenSwapEvent>;

export interface IMiltonEvents extends BaseContract {
  contractName: "IMiltonEvents";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMiltonEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CloseSwap(uint256,address,uint256)"(
      swapId?: BigNumberish | null,
      asset?: null,
      closeTimestamp?: null
    ): CloseSwapEventFilter;
    CloseSwap(
      swapId?: BigNumberish | null,
      asset?: null,
      closeTimestamp?: null
    ): CloseSwapEventFilter;

    "OpenSwap(uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256,tuple,uint256,uint256,uint256)"(
      swapId?: BigNumberish | null,
      buyer?: string | null,
      asset?: null,
      direction?: null,
      collateral?: null,
      liquidationDepositAmount?: null,
      notionalAmount?: null,
      startingTimestamp?: null,
      endingTimestamp?: null,
      indicator?: null,
      openingAmount?: null,
      iporPublicationAmount?: null,
      spreadValue?: null
    ): OpenSwapEventFilter;
    OpenSwap(
      swapId?: BigNumberish | null,
      buyer?: string | null,
      asset?: null,
      direction?: null,
      collateral?: null,
      liquidationDepositAmount?: null,
      notionalAmount?: null,
      startingTimestamp?: null,
      endingTimestamp?: null,
      indicator?: null,
      openingAmount?: null,
      iporPublicationAmount?: null,
      spreadValue?: null
    ): OpenSwapEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
