/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type ReserveConfigurationMapStruct = { data: BigNumberish };

  export type ReserveConfigurationMapStructOutput = [BigNumber] & {
    data: BigNumber;
  };

  export type ReserveDataStruct = {
    configuration: DataTypes.ReserveConfigurationMapStruct;
    liquidityIndex: BigNumberish;
    variableBorrowIndex: BigNumberish;
    currentLiquidityRate: BigNumberish;
    currentVariableBorrowRate: BigNumberish;
    currentStableBorrowRate: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: BigNumberish;
  };

  export type ReserveDataStructOutput = [
    DataTypes.ReserveConfigurationMapStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string,
    number
  ] & {
    configuration: DataTypes.ReserveConfigurationMapStructOutput;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: number;
  };
}

export interface AaveLendingPoolMockV2Interface extends utils.Interface {
  contractName: "AaveLendingPoolMockV2";
  functions: {
    "aDai()": FunctionFragment;
    "currentLiquidityRate()": FunctionFragment;
    "dai()": FunctionFragment;
    "deposit(address,uint256,address,uint16)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "interestRateStrategyAddress()": FunctionFragment;
    "setCurrentLiquidityRate(uint128)": FunctionFragment;
    "setInterestRateStrategyAddress(address)": FunctionFragment;
    "setStableDebtTokenAddress(address)": FunctionFragment;
    "setVariableDebtTokenAddress(address)": FunctionFragment;
    "stableDebtTokenAddress()": FunctionFragment;
    "variableDebtTokenAddress()": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aDai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentLiquidityRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateStrategyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentLiquidityRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateStrategyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableDebtTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariableDebtTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableDebtTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableDebtTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "aDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariableDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableDebtTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface AaveLendingPoolMockV2 extends BaseContract {
  contractName: "AaveLendingPoolMockV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveLendingPoolMockV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aDai(overrides?: CallOverrides): Promise<[string]>;

    "aDai()"(overrides?: CallOverrides): Promise<[string]>;

    currentLiquidityRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentLiquidityRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    "dai()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,address,uint16)"(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ReserveDataStructOutput]>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ReserveDataStructOutput]>;

    interestRateStrategyAddress(overrides?: CallOverrides): Promise<[string]>;

    "interestRateStrategyAddress()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    setCurrentLiquidityRate(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCurrentLiquidityRate(uint128)"(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestRateStrategyAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInterestRateStrategyAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVariableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVariableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableDebtTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "stableDebtTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    variableDebtTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "variableDebtTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address)"(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aDai(overrides?: CallOverrides): Promise<string>;

  "aDai()"(overrides?: CallOverrides): Promise<string>;

  currentLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

  "currentLiquidityRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  "dai()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    arg0: string,
    _amount: BigNumberish,
    _recipient: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,address,uint16)"(
    arg0: string,
    _amount: BigNumberish,
    _recipient: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReserveData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.ReserveDataStructOutput>;

  "getReserveData(address)"(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.ReserveDataStructOutput>;

  interestRateStrategyAddress(overrides?: CallOverrides): Promise<string>;

  "interestRateStrategyAddress()"(overrides?: CallOverrides): Promise<string>;

  setCurrentLiquidityRate(
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCurrentLiquidityRate(uint128)"(
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestRateStrategyAddress(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInterestRateStrategyAddress(address)"(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableDebtTokenAddress(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStableDebtTokenAddress(address)"(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVariableDebtTokenAddress(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVariableDebtTokenAddress(address)"(
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

  "stableDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  variableDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

  "variableDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _asset: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address)"(
    _asset: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aDai(overrides?: CallOverrides): Promise<string>;

    "aDai()"(overrides?: CallOverrides): Promise<string>;

    currentLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

    "currentLiquidityRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,address,uint16)"(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.ReserveDataStructOutput>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.ReserveDataStructOutput>;

    interestRateStrategyAddress(overrides?: CallOverrides): Promise<string>;

    "interestRateStrategyAddress()"(overrides?: CallOverrides): Promise<string>;

    setCurrentLiquidityRate(
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentLiquidityRate(uint128)"(
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateStrategyAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestRateStrategyAddress(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableDebtTokenAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStableDebtTokenAddress(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVariableDebtTokenAddress(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVariableDebtTokenAddress(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

    "stableDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    variableDebtTokenAddress(overrides?: CallOverrides): Promise<string>;

    "variableDebtTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,address)"(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    aDai(overrides?: CallOverrides): Promise<BigNumber>;

    "aDai()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

    "currentLiquidityRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    "dai()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256,address,uint16)"(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRateStrategyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateStrategyAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCurrentLiquidityRate(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCurrentLiquidityRate(uint128)"(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestRateStrategyAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInterestRateStrategyAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVariableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVariableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableDebtTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "stableDebtTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableDebtTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "variableDebtTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aDai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentLiquidityRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentLiquidityRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,address,uint16)"(
      arg0: string,
      _amount: BigNumberish,
      _recipient: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRateStrategyAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestRateStrategyAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurrentLiquidityRate(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCurrentLiquidityRate(uint128)"(
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestRateStrategyAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInterestRateStrategyAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVariableDebtTokenAddress(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVariableDebtTokenAddress(address)"(
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableDebtTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stableDebtTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    variableDebtTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "variableDebtTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _asset: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
