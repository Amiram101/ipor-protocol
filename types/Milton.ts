/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type IporSwapIndicatorStruct = {
    iporIndexValue: BigNumberish;
    ibtPrice: BigNumberish;
    ibtQuantity: BigNumberish;
    fixedInterestRate: BigNumberish;
  };

  export type IporSwapIndicatorStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    iporIndexValue: BigNumber;
    ibtPrice: BigNumber;
    ibtQuantity: BigNumber;
    fixedInterestRate: BigNumber;
  };

  export type IporSwapMemoryStruct = {
    state: BigNumberish;
    buyer: string;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    id: BigNumberish;
    idsIndex: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type IporSwapMemoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: BigNumber;
    buyer: string;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    id: BigNumber;
    idsIndex: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };

  export type MiltonBalanceMemoryStruct = {
    payFixedSwaps: BigNumberish;
    receiveFixedSwaps: BigNumberish;
    liquidityPool: BigNumberish;
    vault: BigNumberish;
  };

  export type MiltonBalanceMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payFixedSwaps: BigNumber;
    receiveFixedSwaps: BigNumber;
    liquidityPool: BigNumber;
    vault: BigNumber;
  };
}

export interface MiltonInterface extends utils.Interface {
  contractName: "Milton";
  functions: {
    "calculateExchangeRate(uint256)": FunctionFragment;
    "calculateSoap()": FunctionFragment;
    "calculateSpread()": FunctionFragment;
    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "closeSwapPayFixed(uint256)": FunctionFragment;
    "closeSwapReceiveFixed(uint256)": FunctionFragment;
    "confirmTransferOwnership()": FunctionFragment;
    "depositToVault(uint256)": FunctionFragment;
    "getAccruedBalance()": FunctionFragment;
    "getIncomeTaxPercentage()": FunctionFragment;
    "getIporPublicationFeeAmount()": FunctionFragment;
    "getLiquidationDepositAmount()": FunctionFragment;
    "getMaxCollateralizationFactorValue()": FunctionFragment;
    "getMaxLpUtilizationPerLegPercentage()": FunctionFragment;
    "getMaxLpUtilizationPercentage()": FunctionFragment;
    "getMaxSlippagePercentage()": FunctionFragment;
    "getMaxSwapCollateralAmount()": FunctionFragment;
    "getMiltonSpreadModel()": FunctionFragment;
    "getMinCollateralizationFactorValue()": FunctionFragment;
    "getOpeningFeeForTreasuryPercentage()": FunctionFragment;
    "getOpeningFeePercentage()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "openSwapPayFixed(uint256,uint256,uint256)": FunctionFragment;
    "openSwapReceiveFixed(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setJoseph(address)": FunctionFragment;
    "setupMaxAllowance(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPublicationFee(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawFromVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapPayFixedValue",
    values: [DataTypes.IporSwapMemoryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapReceiveFixedValue",
    values: [DataTypes.IporSwapMemoryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSwapPayFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSwapReceiveFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncomeTaxPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIporPublicationFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxCollateralizationFactorValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLpUtilizationPerLegPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLpUtilizationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSlippagePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSwapCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMiltonSpreadModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCollateralizationFactorValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFeeForTreasuryPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openSwapPayFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openSwapReceiveFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setJoseph", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setupMaxAllowance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPublicationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapPayFixedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapReceiveFixedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncomeTaxPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIporPublicationFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxCollateralizationFactorValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLpUtilizationPerLegPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLpUtilizationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSlippagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSwapCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiltonSpreadModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollateralizationFactorValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFeeForTreasuryPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJoseph", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupMaxAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPublicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AppointedToTransferOwnership(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CloseSwap(uint256,address,uint256)": EventFragment;
    "OpenSwap(uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256,tuple,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppointedToTransferOwnership"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloseSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AppointedToTransferOwnershipEvent = TypedEvent<
  [string],
  { appointedOwner: string }
>;

export type AppointedToTransferOwnershipEventFilter =
  TypedEventFilter<AppointedToTransferOwnershipEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CloseSwapEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { swapId: BigNumber; asset: string; closeTimestamp: BigNumber }
>;

export type CloseSwapEventFilter = TypedEventFilter<CloseSwapEvent>;

export type OpenSwapEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    DataTypes.IporSwapIndicatorStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    swapId: BigNumber;
    buyer: string;
    asset: string;
    direction: number;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    indicator: DataTypes.IporSwapIndicatorStructOutput;
    openingAmount: BigNumber;
    iporPublicationAmount: BigNumber;
    spreadValue: BigNumber;
  }
>;

export type OpenSwapEventFilter = TypedEventFilter<OpenSwapEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Milton extends BaseContract {
  contractName: "Milton";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiltonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSoap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSpread(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccruedBalance(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    getIncomeTaxPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getIncomeTaxPercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIporPublicationFeeAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIporPublicationFeeAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidationDepositAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLiquidationDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxLpUtilizationPerLegPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxLpUtilizationPerLegPercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxLpUtilizationPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMaxLpUtilizationPercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxSlippagePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaxSlippagePercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxSwapCollateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaxSwapCollateralAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMiltonSpreadModel(overrides?: CallOverrides): Promise<[string]>;

    "getMiltonSpreadModel()"(overrides?: CallOverrides): Promise<[string]>;

    getMinCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpeningFeeForTreasuryPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOpeningFeeForTreasuryPercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpeningFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getOpeningFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPublicationFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferPublicationFee(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateExchangeRate(
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateExchangeRate(uint256)"(
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSoap(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  "calculateSoap()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  calculateSpread(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      spreadPayFixedValue: BigNumber;
      spreadRecFixedValue: BigNumber;
    }
  >;

  "calculateSpread()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      spreadPayFixedValue: BigNumber;
      spreadRecFixedValue: BigNumber;
    }
  >;

  calculateSwapPayFixedValue(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapReceiveFixedValue(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeSwapPayFixed(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeSwapPayFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeSwapReceiveFixed(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeSwapReceiveFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmTransferOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositToVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccruedBalance(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  "getAccruedBalance()"(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  getIncomeTaxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getIncomeTaxPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getIporPublicationFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getIporPublicationFeeAmount()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidationDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidationDepositAmount()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxCollateralizationFactorValue(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxCollateralizationFactorValue()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxLpUtilizationPerLegPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMaxLpUtilizationPerLegPercentage()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxLpUtilizationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxLpUtilizationPercentage()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxSlippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxSlippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxSwapCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxSwapCollateralAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMiltonSpreadModel(overrides?: CallOverrides): Promise<string>;

  "getMiltonSpreadModel()"(overrides?: CallOverrides): Promise<string>;

  getMinCollateralizationFactorValue(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinCollateralizationFactorValue()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpeningFeeForTreasuryPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOpeningFeeForTreasuryPercentage()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpeningFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "getOpeningFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    asset: string,
    ipToken: string,
    warren: string,
    miltonStorage: string,
    miltonSpreadModel: string,
    initialIporConfiguration: string,
    iporAssetConfigurationAddr: string,
    iporVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,address,address,address)"(
    asset: string,
    ipToken: string,
    warren: string,
    miltonStorage: string,
    miltonSpreadModel: string,
    initialIporConfiguration: string,
    iporAssetConfigurationAddr: string,
    iporVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSwapPayFixed(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openSwapPayFixed(uint256,uint256,uint256)"(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSwapReceiveFixed(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openSwapReceiveFixed(uint256,uint256,uint256)"(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoseph(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoseph(address)"(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupMaxAllowance(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupMaxAllowance(address)"(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPublicationFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferPublicationFee(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSpread(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        spreadPayFixedValue: BigNumber;
        spreadRecFixedValue: BigNumber;
      }
    >;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransferOwnership(overrides?: CallOverrides): Promise<void>;

    "confirmTransferOwnership()"(overrides?: CallOverrides): Promise<void>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccruedBalance(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    getIncomeTaxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getIncomeTaxPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIporPublicationFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getIporPublicationFeeAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLpUtilizationPerLegPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxLpUtilizationPerLegPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLpUtilizationPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxLpUtilizationPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSlippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxSlippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxSwapCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxSwapCollateralAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiltonSpreadModel(overrides?: CallOverrides): Promise<string>;

    "getMiltonSpreadModel()"(overrides?: CallOverrides): Promise<string>;

    getMinCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFeeForTreasuryPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOpeningFeeForTreasuryPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpeningFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,address,address,address)"(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setJoseph(joseph: string, overrides?: CallOverrides): Promise<void>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupMaxAllowance(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPublicationFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPublicationFee(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AppointedToTransferOwnership(address)"(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;
    AppointedToTransferOwnership(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CloseSwap(uint256,address,uint256)"(
      swapId?: BigNumberish | null,
      asset?: null,
      closeTimestamp?: null
    ): CloseSwapEventFilter;
    CloseSwap(
      swapId?: BigNumberish | null,
      asset?: null,
      closeTimestamp?: null
    ): CloseSwapEventFilter;

    "OpenSwap(uint256,address,address,uint8,uint256,uint256,uint256,uint256,uint256,tuple,uint256,uint256,uint256)"(
      swapId?: BigNumberish | null,
      buyer?: string | null,
      asset?: null,
      direction?: null,
      collateral?: null,
      liquidationDepositAmount?: null,
      notionalAmount?: null,
      startingTimestamp?: null,
      endingTimestamp?: null,
      indicator?: null,
      openingAmount?: null,
      iporPublicationAmount?: null,
      spreadValue?: null
    ): OpenSwapEventFilter;
    OpenSwap(
      swapId?: BigNumberish | null,
      buyer?: string | null,
      asset?: null,
      direction?: null,
      collateral?: null,
      liquidationDepositAmount?: null,
      notionalAmount?: null,
      startingTimestamp?: null,
      endingTimestamp?: null,
      indicator?: null,
      openingAmount?: null,
      iporPublicationAmount?: null,
      spreadValue?: null
    ): OpenSwapEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoap(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSoap()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSpread(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSpread()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccruedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccruedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIncomeTaxPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getIncomeTaxPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIporPublicationFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getIporPublicationFeeAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidationDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLpUtilizationPerLegPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxLpUtilizationPerLegPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLpUtilizationPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMaxLpUtilizationPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSlippagePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxSlippagePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxSwapCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxSwapCollateralAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiltonSpreadModel(overrides?: CallOverrides): Promise<BigNumber>;

    "getMiltonSpreadModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFeeForTreasuryPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOpeningFeeForTreasuryPercentage()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpeningFeePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,address,address,address)"(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPublicationFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferPublicationFee(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculateSoap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccruedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncomeTaxPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIncomeTaxPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIporPublicationFeeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIporPublicationFeeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationDepositAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLpUtilizationPerLegPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxLpUtilizationPerLegPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLpUtilizationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxLpUtilizationPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSlippagePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxSlippagePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSwapCollateralAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxSwapCollateralAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiltonSpreadModel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMiltonSpreadModel()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinCollateralizationFactorValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinCollateralizationFactorValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpeningFeeForTreasuryPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpeningFeeForTreasuryPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpeningFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpeningFeePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,address,address,address)"(
      asset: string,
      ipToken: string,
      warren: string,
      miltonStorage: string,
      miltonSpreadModel: string,
      initialIporConfiguration: string,
      iporAssetConfigurationAddr: string,
      iporVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPublicationFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferPublicationFee(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
