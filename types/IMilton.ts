/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type IporSwapMemoryStruct = {
    state: BigNumberish;
    buyer: string;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    id: BigNumberish;
    idsIndex: BigNumberish;
    collateral: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    notionalAmount: BigNumberish;
    fixedInterestRate: BigNumberish;
    ibtQuantity: BigNumberish;
  };

  export type IporSwapMemoryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: BigNumber;
    buyer: string;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    id: BigNumber;
    idsIndex: BigNumber;
    collateral: BigNumber;
    liquidationDepositAmount: BigNumber;
    notionalAmount: BigNumber;
    fixedInterestRate: BigNumber;
    ibtQuantity: BigNumber;
  };

  export type MiltonBalanceMemoryStruct = {
    payFixedSwaps: BigNumberish;
    receiveFixedSwaps: BigNumberish;
    liquidityPool: BigNumberish;
    vault: BigNumberish;
  };

  export type MiltonBalanceMemoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payFixedSwaps: BigNumber;
    receiveFixedSwaps: BigNumber;
    liquidityPool: BigNumber;
    vault: BigNumber;
  };
}

export interface IMiltonInterface extends utils.Interface {
  contractName: "IMilton";
  functions: {
    "calculateExchangeRate(uint256)": FunctionFragment;
    "calculateSoap()": FunctionFragment;
    "calculateSpread()": FunctionFragment;
    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "closeSwapPayFixed(uint256)": FunctionFragment;
    "closeSwapReceiveFixed(uint256)": FunctionFragment;
    "depositToVault(uint256)": FunctionFragment;
    "getAccruedBalance()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "openSwapPayFixed(uint256,uint256,uint256)": FunctionFragment;
    "openSwapReceiveFixed(uint256,uint256,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "setJoseph(address)": FunctionFragment;
    "setupMaxAllowance(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawFromVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSoap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapPayFixedValue",
    values: [DataTypes.IporSwapMemoryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapReceiveFixedValue",
    values: [DataTypes.IporSwapMemoryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSwapPayFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeSwapReceiveFixed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openSwapPayFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openSwapReceiveFixed",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "setJoseph", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setupMaxAllowance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSoap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapPayFixedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapReceiveFixedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSwapPayFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openSwapReceiveFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setJoseph", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupMaxAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMilton extends BaseContract {
  contractName: "IMilton";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMiltonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSoap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSpread(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
    >;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
    >;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccruedBalance(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<[DataTypes.MiltonBalanceMemoryStructOutput]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateExchangeRate(
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateExchangeRate(uint256)"(
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSoap(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  "calculateSoap()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      soapPf: BigNumber;
      soapRf: BigNumber;
      soap: BigNumber;
    }
  >;

  calculateSpread(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
  >;

  "calculateSpread()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
  >;

  calculateSwapPayFixedValue(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapReceiveFixedValue(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    swap: DataTypes.IporSwapMemoryStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeSwapPayFixed(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeSwapPayFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeSwapReceiveFixed(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closeSwapReceiveFixed(uint256)"(
    swapId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositToVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccruedBalance(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  "getAccruedBalance()"(
    overrides?: CallOverrides
  ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  openSwapPayFixed(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openSwapPayFixed(uint256,uint256,uint256)"(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSwapReceiveFixed(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openSwapReceiveFixed(uint256,uint256,uint256)"(
    totalAmount: BigNumberish,
    maximumSlippage: BigNumberish,
    collateralizationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoseph(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setJoseph(address)"(
    joseph: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupMaxAllowance(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupMaxAllowance(address)"(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromVault(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromVault(uint256)"(
    assetValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    "calculateSoap()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        soapPf: BigNumber;
        soapRf: BigNumber;
        soap: BigNumber;
      }
    >;

    calculateSpread(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
    >;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { spreadPf: BigNumber; spreadRf: BigNumber }
    >;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccruedBalance(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<DataTypes.MiltonBalanceMemoryStructOutput>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    setJoseph(joseph: string, overrides?: CallOverrides): Promise<void>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupMaxAllowance(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSoap(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSoap()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSpread(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSpread()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccruedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccruedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateExchangeRate(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateExchangeRate(uint256)"(
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSoap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculateSoap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculateSpread()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapPayFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSwapPayFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapReceiveFixedValue(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSwapReceiveFixedValue((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      swap: DataTypes.IporSwapMemoryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeSwapPayFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeSwapPayFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeSwapReceiveFixed(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closeSwapReceiveFixed(uint256)"(
      swapId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositToVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccruedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAccruedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openSwapPayFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openSwapPayFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSwapReceiveFixed(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openSwapReceiveFixed(uint256,uint256,uint256)"(
      totalAmount: BigNumberish,
      maximumSlippage: BigNumberish,
      collateralizationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoseph(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setJoseph(address)"(
      joseph: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupMaxAllowance(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupMaxAllowance(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromVault(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromVault(uint256)"(
      assetValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
