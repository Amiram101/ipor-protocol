/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IMiltonFrontendDataProvider {
  export type IporAssetConfigurationFrontStruct = {
    asset: string;
    minCollateralizationFactorValue: BigNumberish;
    maxCollateralizationFactorValue: BigNumberish;
    openingFeePercentage: BigNumberish;
    iporPublicationFeeAmount: BigNumberish;
    liquidationDepositAmount: BigNumberish;
    incomeTaxPercentage: BigNumberish;
    spreadPayFixedValue: BigNumberish;
    spreadRecFixedValue: BigNumberish;
  };

  export type IporAssetConfigurationFrontStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    asset: string;
    minCollateralizationFactorValue: BigNumber;
    maxCollateralizationFactorValue: BigNumber;
    openingFeePercentage: BigNumber;
    iporPublicationFeeAmount: BigNumber;
    liquidationDepositAmount: BigNumber;
    incomeTaxPercentage: BigNumber;
    spreadPayFixedValue: BigNumber;
    spreadRecFixedValue: BigNumber;
  };

  export type IporSwapFrontStruct = {
    id: BigNumberish;
    asset: string;
    collateral: BigNumberish;
    notionalAmount: BigNumberish;
    collateralizationFactor: BigNumberish;
    direction: BigNumberish;
    fixedInterestRate: BigNumberish;
    positionValue: BigNumberish;
    startingTimestamp: BigNumberish;
    endingTimestamp: BigNumberish;
    liquidationDepositAmount: BigNumberish;
  };

  export type IporSwapFrontStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    asset: string;
    collateral: BigNumber;
    notionalAmount: BigNumber;
    collateralizationFactor: BigNumber;
    direction: number;
    fixedInterestRate: BigNumber;
    positionValue: BigNumber;
    startingTimestamp: BigNumber;
    endingTimestamp: BigNumber;
    liquidationDepositAmount: BigNumber;
  };
}

export interface IMiltonFrontendDataProviderInterface extends utils.Interface {
  contractName: "IMiltonFrontendDataProvider";
  functions: {
    "getConfiguration()": FunctionFragment;
    "getIpTokenExchangeRate(address)": FunctionFragment;
    "getMySwaps(address)": FunctionFragment;
    "getTotalOutstandingNotional(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIpTokenExchangeRate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMySwaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalOutstandingNotional",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIpTokenExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMySwaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOutstandingNotional",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMiltonFrontendDataProvider extends BaseContract {
  contractName: "IMiltonFrontendDataProvider";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMiltonFrontendDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getConfiguration()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIpTokenExchangeRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIpTokenExchangeRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMySwaps(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]] & {
        items: IMiltonFrontendDataProvider.IporSwapFrontStructOutput[];
      }
    >;

    "getMySwaps(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]] & {
        items: IMiltonFrontendDataProvider.IporSwapFrontStructOutput[];
      }
    >;

    getTotalOutstandingNotional(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    "getTotalOutstandingNotional(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;
  };

  getConfiguration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getConfiguration()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIpTokenExchangeRate(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIpTokenExchangeRate(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMySwaps(
    asset: string,
    overrides?: CallOverrides
  ): Promise<IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]>;

  "getMySwaps(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]>;

  getTotalOutstandingNotional(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      payFixedTotalNotional: BigNumber;
      recFixedTotalNotional: BigNumber;
    }
  >;

  "getTotalOutstandingNotional(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      payFixedTotalNotional: BigNumber;
      recFixedTotalNotional: BigNumber;
    }
  >;

  callStatic: {
    getConfiguration(
      overrides?: CallOverrides
    ): Promise<
      IMiltonFrontendDataProvider.IporAssetConfigurationFrontStructOutput[]
    >;

    "getConfiguration()"(
      overrides?: CallOverrides
    ): Promise<
      IMiltonFrontendDataProvider.IporAssetConfigurationFrontStructOutput[]
    >;

    getIpTokenExchangeRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIpTokenExchangeRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMySwaps(
      asset: string,
      overrides?: CallOverrides
    ): Promise<IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]>;

    "getMySwaps(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<IMiltonFrontendDataProvider.IporSwapFrontStructOutput[]>;

    getTotalOutstandingNotional(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;

    "getTotalOutstandingNotional(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        payFixedTotalNotional: BigNumber;
        recFixedTotalNotional: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getConfiguration()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIpTokenExchangeRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIpTokenExchangeRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMySwaps(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getMySwaps(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOutstandingNotional(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalOutstandingNotional(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConfiguration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getConfiguration()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIpTokenExchangeRate(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIpTokenExchangeRate(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMySwaps(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMySwaps(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOutstandingNotional(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalOutstandingNotional(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
