/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IIporConfigurationInterface extends utils.Interface {
  contractName: "IIporConfiguration";
  functions: {
    "getIporAssetConfiguration(address)": FunctionFragment;
    "getMiltonPublicationFeeTransferer()": FunctionFragment;
    "setIporAssetConfiguration(address,address)": FunctionFragment;
    "setMiltonPublicationFeeTransferer(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getIporAssetConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiltonPublicationFeeTransferer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIporAssetConfiguration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMiltonPublicationFeeTransferer",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIporAssetConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiltonPublicationFeeTransferer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIporAssetConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiltonPublicationFeeTransferer",
    data: BytesLike
  ): Result;

  events: {
    "AssetAddressAdd(address)": EventFragment;
    "AssetAddressRemoved(address)": EventFragment;
    "IporAssetConfigurationAddressUpdated(address,address)": EventFragment;
    "MiltonPublicationFeeTransfererUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAddressAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAddressRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IporAssetConfigurationAddressUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MiltonPublicationFeeTransfererUpdated"
  ): EventFragment;
}

export type AssetAddressAddEvent = TypedEvent<[string], { newAddress: string }>;

export type AssetAddressAddEventFilter = TypedEventFilter<AssetAddressAddEvent>;

export type AssetAddressRemovedEvent = TypedEvent<[string], { asset: string }>;

export type AssetAddressRemovedEventFilter =
  TypedEventFilter<AssetAddressRemovedEvent>;

export type IporAssetConfigurationAddressUpdatedEvent = TypedEvent<
  [string, string],
  { asset: string; newAddress: string }
>;

export type IporAssetConfigurationAddressUpdatedEventFilter =
  TypedEventFilter<IporAssetConfigurationAddressUpdatedEvent>;

export type MiltonPublicationFeeTransfererUpdatedEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type MiltonPublicationFeeTransfererUpdatedEventFilter =
  TypedEventFilter<MiltonPublicationFeeTransfererUpdatedEvent>;

export interface IIporConfiguration extends BaseContract {
  contractName: "IIporConfiguration";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIporConfigurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getIporAssetConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getIporAssetConfiguration(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMiltonPublicationFeeTransferer(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMiltonPublicationFeeTransferer()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    setIporAssetConfiguration(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIporAssetConfiguration(address,address)"(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMiltonPublicationFeeTransferer(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMiltonPublicationFeeTransferer(address)"(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getIporAssetConfiguration(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getIporAssetConfiguration(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMiltonPublicationFeeTransferer(overrides?: CallOverrides): Promise<string>;

  "getMiltonPublicationFeeTransferer()"(
    overrides?: CallOverrides
  ): Promise<string>;

  setIporAssetConfiguration(
    asset: string,
    iporConfig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIporAssetConfiguration(address,address)"(
    asset: string,
    iporConfig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMiltonPublicationFeeTransferer(
    publicationFeeTransferer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMiltonPublicationFeeTransferer(address)"(
    publicationFeeTransferer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getIporAssetConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getIporAssetConfiguration(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMiltonPublicationFeeTransferer(
      overrides?: CallOverrides
    ): Promise<string>;

    "getMiltonPublicationFeeTransferer()"(
      overrides?: CallOverrides
    ): Promise<string>;

    setIporAssetConfiguration(
      asset: string,
      iporConfig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIporAssetConfiguration(address,address)"(
      asset: string,
      iporConfig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMiltonPublicationFeeTransferer(
      publicationFeeTransferer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMiltonPublicationFeeTransferer(address)"(
      publicationFeeTransferer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetAddressAdd(address)"(newAddress?: null): AssetAddressAddEventFilter;
    AssetAddressAdd(newAddress?: null): AssetAddressAddEventFilter;

    "AssetAddressRemoved(address)"(
      asset?: string | null
    ): AssetAddressRemovedEventFilter;
    AssetAddressRemoved(asset?: string | null): AssetAddressRemovedEventFilter;

    "IporAssetConfigurationAddressUpdated(address,address)"(
      asset?: string | null,
      newAddress?: string | null
    ): IporAssetConfigurationAddressUpdatedEventFilter;
    IporAssetConfigurationAddressUpdated(
      asset?: string | null,
      newAddress?: string | null
    ): IporAssetConfigurationAddressUpdatedEventFilter;

    "MiltonPublicationFeeTransfererUpdated(address)"(
      newAddress?: string | null
    ): MiltonPublicationFeeTransfererUpdatedEventFilter;
    MiltonPublicationFeeTransfererUpdated(
      newAddress?: string | null
    ): MiltonPublicationFeeTransfererUpdatedEventFilter;
  };

  estimateGas: {
    getIporAssetConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIporAssetConfiguration(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiltonPublicationFeeTransferer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMiltonPublicationFeeTransferer()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIporAssetConfiguration(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIporAssetConfiguration(address,address)"(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMiltonPublicationFeeTransferer(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMiltonPublicationFeeTransferer(address)"(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getIporAssetConfiguration(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIporAssetConfiguration(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiltonPublicationFeeTransferer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMiltonPublicationFeeTransferer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIporAssetConfiguration(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIporAssetConfiguration(address,address)"(
      asset: string,
      iporConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMiltonPublicationFeeTransferer(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMiltonPublicationFeeTransferer(address)"(
      publicationFeeTransferer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
