/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DataTypes {
  export type AccruedIporStruct = {
    indexValue: BigNumberish;
    ibtPrice: BigNumberish;
    exponentialMovingAverage: BigNumberish;
    exponentialWeightedMovingVariance: BigNumberish;
  };

  export type AccruedIporStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    indexValue: BigNumber;
    ibtPrice: BigNumber;
    exponentialMovingAverage: BigNumber;
    exponentialWeightedMovingVariance: BigNumber;
  };
}

export interface WarrenInterface extends utils.Interface {
  contractName: "Warren";
  functions: {
    "addAsset(address)": FunctionFragment;
    "addUpdater(address)": FunctionFragment;
    "calculateAccruedIbtPrice(address,uint256)": FunctionFragment;
    "confirmTransferOwnership()": FunctionFragment;
    "getAccruedIndex(uint256,address)": FunctionFragment;
    "getIndex(address)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isUpdater(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
    "removeUpdater(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateIndex(address,uint256)": FunctionFragment;
    "updateIndexes(address[],uint256[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAsset", values: [string]): string;
  encodeFunctionData(functionFragment: "addUpdater", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateAccruedIbtPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedIndex",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getIndex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isUpdater", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeUpdater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndexes",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccruedIbtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AppointedToTransferOwnership(address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "IporIndexAddAsset(address)": EventFragment;
    "IporIndexAddUpdater(address)": EventFragment;
    "IporIndexRemoveAsset(address)": EventFragment;
    "IporIndexRemoveUpdater(address)": EventFragment;
    "IporIndexUpdate(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AppointedToTransferOwnership"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IporIndexAddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IporIndexAddUpdater"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IporIndexRemoveAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IporIndexRemoveUpdater"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IporIndexUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AppointedToTransferOwnershipEvent = TypedEvent<
  [string],
  { appointedOwner: string }
>;

export type AppointedToTransferOwnershipEventFilter =
  TypedEventFilter<AppointedToTransferOwnershipEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type IporIndexAddAssetEvent = TypedEvent<[string], { newAsset: string }>;

export type IporIndexAddAssetEventFilter =
  TypedEventFilter<IporIndexAddAssetEvent>;

export type IporIndexAddUpdaterEvent = TypedEvent<
  [string],
  { updater: string }
>;

export type IporIndexAddUpdaterEventFilter =
  TypedEventFilter<IporIndexAddUpdaterEvent>;

export type IporIndexRemoveAssetEvent = TypedEvent<
  [string],
  { newAsset: string }
>;

export type IporIndexRemoveAssetEventFilter =
  TypedEventFilter<IporIndexRemoveAssetEvent>;

export type IporIndexRemoveUpdaterEvent = TypedEvent<
  [string],
  { updater: string }
>;

export type IporIndexRemoveUpdaterEventFilter =
  TypedEventFilter<IporIndexRemoveUpdaterEvent>;

export type IporIndexUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    asset: string;
    indexValue: BigNumber;
    quasiIbtPrice: BigNumber;
    exponentialMovingAverage: BigNumber;
    newExponentialWeightedMovingVariance: BigNumber;
    date: BigNumber;
  }
>;

export type IporIndexUpdateEventFilter = TypedEventFilter<IporIndexUpdateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Warren extends BaseContract {
  contractName: "Warren";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WarrenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateAccruedIbtPrice(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateAccruedIbtPrice(address,uint256)"(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccruedIndex(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.AccruedIporStructOutput] & {
        accruedIpor: DataTypes.AccruedIporStructOutput;
      }
    >;

    "getAccruedIndex(uint256,address)"(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.AccruedIporStructOutput] & {
        accruedIpor: DataTypes.AccruedIporStructOutput;
      }
    >;

    getIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexValue: BigNumber;
        ibtPrice: BigNumber;
        exponentialMovingAverage: BigNumber;
        exponentialWeightedMovingVariance: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    "getIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexValue: BigNumber;
        ibtPrice: BigNumber;
        exponentialMovingAverage: BigNumber;
        exponentialWeightedMovingVariance: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isUpdater(updater: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "isUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    removeAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIndex(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateIndex(address,uint256)"(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIndexes(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateIndexes(address[],uint256[])"(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAsset(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAsset(address)"(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUpdater(
    updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addUpdater(address)"(
    updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateAccruedIbtPrice(
    asset: string,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateAccruedIbtPrice(address,uint256)"(
    asset: string,
    calculateTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  confirmTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "confirmTransferOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccruedIndex(
    calculateTimestamp: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.AccruedIporStructOutput>;

  "getAccruedIndex(uint256,address)"(
    calculateTimestamp: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.AccruedIporStructOutput>;

  getIndex(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      indexValue: BigNumber;
      ibtPrice: BigNumber;
      exponentialMovingAverage: BigNumber;
      exponentialWeightedMovingVariance: BigNumber;
      blockTimestamp: BigNumber;
    }
  >;

  "getIndex(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      indexValue: BigNumber;
      ibtPrice: BigNumber;
      exponentialMovingAverage: BigNumber;
      exponentialWeightedMovingVariance: BigNumber;
      blockTimestamp: BigNumber;
    }
  >;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isUpdater(updater: string, overrides?: CallOverrides): Promise<BigNumber>;

  "isUpdater(address)"(
    updater: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  removeAsset(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAsset(address)"(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUpdater(
    updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeUpdater(address)"(
    updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    appointedOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIndex(
    asset: string,
    indexValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateIndex(address,uint256)"(
    asset: string,
    indexValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIndexes(
    assets: string[],
    indexValues: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateIndexes(address[],uint256[])"(
    assets: string[],
    indexValues: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(asset: string, overrides?: CallOverrides): Promise<void>;

    "addAsset(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addUpdater(updater: string, overrides?: CallOverrides): Promise<void>;

    "addUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateAccruedIbtPrice(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAccruedIbtPrice(address,uint256)"(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(overrides?: CallOverrides): Promise<void>;

    "confirmTransferOwnership()"(overrides?: CallOverrides): Promise<void>;

    getAccruedIndex(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.AccruedIporStructOutput>;

    "getAccruedIndex(uint256,address)"(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.AccruedIporStructOutput>;

    getIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexValue: BigNumber;
        ibtPrice: BigNumber;
        exponentialMovingAverage: BigNumber;
        exponentialWeightedMovingVariance: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    "getIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexValue: BigNumber;
        ibtPrice: BigNumber;
        exponentialMovingAverage: BigNumber;
        exponentialWeightedMovingVariance: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isUpdater(updater: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    removeAsset(asset: string, overrides?: CallOverrides): Promise<void>;

    "removeAsset(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUpdater(updater: string, overrides?: CallOverrides): Promise<void>;

    "removeUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateIndex(
      asset: string,
      indexValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateIndex(address,uint256)"(
      asset: string,
      indexValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIndexes(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateIndexes(address[],uint256[])"(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AppointedToTransferOwnership(address)"(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;
    AppointedToTransferOwnership(
      appointedOwner?: string | null
    ): AppointedToTransferOwnershipEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "IporIndexAddAsset(address)"(newAsset?: null): IporIndexAddAssetEventFilter;
    IporIndexAddAsset(newAsset?: null): IporIndexAddAssetEventFilter;

    "IporIndexAddUpdater(address)"(
      updater?: null
    ): IporIndexAddUpdaterEventFilter;
    IporIndexAddUpdater(updater?: null): IporIndexAddUpdaterEventFilter;

    "IporIndexRemoveAsset(address)"(
      newAsset?: null
    ): IporIndexRemoveAssetEventFilter;
    IporIndexRemoveAsset(newAsset?: null): IporIndexRemoveAssetEventFilter;

    "IporIndexRemoveUpdater(address)"(
      updater?: null
    ): IporIndexRemoveUpdaterEventFilter;
    IporIndexRemoveUpdater(updater?: null): IporIndexRemoveUpdaterEventFilter;

    "IporIndexUpdate(address,uint256,uint256,uint256,uint256,uint256)"(
      asset?: null,
      indexValue?: null,
      quasiIbtPrice?: null,
      exponentialMovingAverage?: null,
      newExponentialWeightedMovingVariance?: null,
      date?: null
    ): IporIndexUpdateEventFilter;
    IporIndexUpdate(
      asset?: null,
      indexValue?: null,
      quasiIbtPrice?: null,
      exponentialMovingAverage?: null,
      newExponentialWeightedMovingVariance?: null,
      date?: null
    ): IporIndexUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateAccruedIbtPrice(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateAccruedIbtPrice(address,uint256)"(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccruedIndex(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccruedIndex(uint256,address)"(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndex(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isUpdater(updater: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIndex(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateIndex(address,uint256)"(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIndexes(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateIndexes(address[],uint256[])"(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateAccruedIbtPrice(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateAccruedIbtPrice(address,uint256)"(
      asset: string,
      calculateTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "confirmTransferOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccruedIndex(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccruedIndex(uint256,address)"(
      calculateTimestamp: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndex(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndex(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isUpdater(
      updater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUpdater(address)"(
      updater: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAsset(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUpdater(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeUpdater(address)"(
      updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      appointedOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIndex(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateIndex(address,uint256)"(
      asset: string,
      indexValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIndexes(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateIndexes(address[],uint256[])"(
      assets: string[],
      indexValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
